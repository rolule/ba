
@online{noauthor_what_nodate,
	title = {What is Load Testing? How to create a Load Test in k6},
	url = {https://k6.io/docs/test-types/load-testing},
	shorttitle = {What is Load Testing?},
	abstract = {A Load Test is a type of Performance Test that is primarily concerned with assessing the performance of your system in terms of concurrent users or requests per second. Let‚Äôs see an example.},
	urldate = {2021-02-10},
	langid = {english},
}

@online{noauthor_what_nodate-1,
	title = {What is Load Testing? How to create a Load Test in k6},
	url = {https://k6.io/docs/test-types/load-testing},
	shorttitle = {What is Load Testing?},
	abstract = {A Load Test is a type of Performance Test that is primarily concerned with assessing the performance of your system in terms of concurrent users or requests per second. Let‚Äôs see an example.},
	urldate = {2021-02-10},
	langid = {english},
}

@online{noauthor_what_nodate-2,
	title = {What is Stress Testing? How to create a Stress Test in k6},
	url = {https://k6.io/docs/test-types/stress-testing},
	shorttitle = {What is Stress Testing?},
	abstract = {Stress and Spike Tests are types of performance tests that are concerned with assessing the limits of your system and stability under extreme conditions. Let‚Äôs see two examples.},
	urldate = {2021-02-10},
	langid = {english},
}

@online{noauthor_503_nodate,
	title = {503 Service Unavailable - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503},
	urldate = {2021-02-10},
}

@online{noauthor_http_nodate,
	title = {{HTTP} 504 (Gateway Timeout): So l√§sst sich der 504-Error beheben},
	url = {https://www.ionos.de/digitalguide/hosting/hosting-technik/504-gateway-timeout-so-loesen-sie-das-problem/},
	shorttitle = {{HTTP} 504 (Gateway Timeout)},
	abstract = {Erfahren Sie hier was Sie bei einem 504 Gateway Time Out machen k√∂nnen. So l√∂sen Sie den Error 504 als Seitenbesucher und Website-Betreiber.},
	titleaddon = {{IONOS} Digitalguide},
	urldate = {2021-02-10},
	langid = {german},
}

@online{noauthor_error_nodate,
	title = {Error 502 Bad Gateway: Wo liegt das Problem?},
	url = {https://www.ionos.de/digitalguide/hosting/hosting-technik/was-bedeutet-502-bad-gateway-erklaerung-loesung/},
	shorttitle = {Error 502 Bad Gateway},
	abstract = {Der 502-Error: Wir erkl√§ren Ihnen, wo Sie als Internetnutzer und als Webmaster nach den Ursachen f√ºr den Bad Gateway suchen sollten.},
	titleaddon = {{IONOS} Digitalguide},
	urldate = {2021-02-10},
	langid = {german},
}

@online{noauthor_502_nodate,
	title = {502 Bad Gateway - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502},
	urldate = {2021-02-10},
}

@online{noauthor_200_nodate,
	title = {200 {OK} - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/de/docs/Web/HTTP/Status/200},
	urldate = {2021-02-10},
}

@online{noauthor_500_nodate,
	title = {500 Internal Server Error - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/de/docs/Web/HTTP/Status/500},
	urldate = {2021-02-10},
}

@online{noauthor_preise_nodate,
	title = {Preise f√ºr Elastic Load Balancing ‚Äì Amazon Web Services},
	url = {https://aws.amazon.com/de/elasticloadbalancing/pricing/},
	abstract = {Preisdetails zu Elastic Load Balancing.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-02-09},
	langid = {german},
}

@misc{hendrickson_serverless_2017,
	title = {Serverless Computation with {OpenLambda}},
	url = {https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_hendrickson.pdf},
	abstract = {We present {OpenLambda}, a new, open-source platform for building next-generation web services and applications in the burgeoning model of serverless computation. We describe the key aspects of serverless computation, and present numerous research challenges that must be addressed in the design and implementation of such systems. We also include a brief study of current web applications, so as to better motivate some aspects of serverless application construction.},
	author = {Hendrickson, Scott and Sturdevant, Stephen and Harter, Tyler and Venkataramani, Venkateshwaran and Arpaci-Dusseau, Andrea C and Arpaci-Dusseau, Remzi H},
	date = {2017},
	langid = {english},
}

@misc{noauthor_serverless_2017,
	title = {Serverless Architectures with {AWS} Lambda},
	url = {https://d1.awsstatic.com/whitepapers/serverless-architectures-with-aws-lambda.pdf},
	urldate = {2021-02-04},
	date = {2017-11},
	langid = {german},
}

@online{malishev_aws_2019,
	title = {{AWS} Lambda Cold Start Language Comparisons, 2019 edition ‚òÉÔ∏è {\textbar} by Nathan Malishev {\textbar} Level Up Coding},
	url = {https://levelup.gitconnected.com/aws-lambda-cold-start-language-comparisons-2019-edition-%EF%B8%8F-1946d32a0244},
	author = {Malishev, Nathan},
	urldate = {2021-01-03},
	date = {2019-09-04},
}

@online{malishev_aws_2018,
	title = {{AWS} Lambda‚Äôs \& {VPC} cold starts ‚Äî The dark side üï∂ ‚õà},
	url = {https://levelup.gitconnected.com/lambda-vpc-cold-starts-a-latency-killer-5408323278dd},
	abstract = {All serverless computing suffers from the dreaded ‚Äúcold start‚Äù, and {AWS} Lambda is no different. I‚Äôve explored cold starts before in a‚Ä¶},
	titleaddon = {Medium},
	author = {Malishev, Nathan},
	urldate = {2021-01-07},
	date = {2018-06-15},
	langid = {english},
}

@online{noauthor_how_nodate,
	title = {How to Reduce Docker Image Size - {DZone} Cloud},
	url = {https://dzone.com/articles/how-to-reduce-docker-image-size},
	abstract = {After some research, we learned some tips that help reduce Docker image size. Read on for the tutorial!},
	titleaddon = {dzone.com},
	urldate = {2021-02-03},
	langid = {english},
}

@online{noauthor_aws_nodate,
	title = {{AWS} Fargate-Preise {\textbar} Serverless Compute Engine {\textbar} Amazon Web Services},
	url = {https://aws.amazon.com/de/fargate/pricing/},
	abstract = {Erfahren Sie mehr √ºber die Preise von {AWS} Fargate f√ºr den Betrieb von Containern auf Amazon {ECS} und {EKS}.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-02-02},
	langid = {german},
}

@online{noauthor_amazon_nodate,
	title = {Amazon {API} Gateway ‚Äì Preise {\textbar} {API}-Management {\textbar} Amazon Web Services},
	url = {https://aws.amazon.com/de/api-gateway/pricing/},
	abstract = {Hier finden Sie Preisdetails f√ºr Amazon {API} Gateway und Beispiele f√ºr {APIs} der Typen {HTTP}, {REST} und {WebSocket}.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-02-02},
	langid = {german},
}

@online{noauthor_vertical_nodate,
	title = {Vertical Pod Autoscaler - Amazon {EKS}},
	url = {https://docs.aws.amazon.com/eks/latest/userguide/vertical-pod-autoscaler.html},
	urldate = {2021-02-02},
}

@online{noauthor_vertical_nodate-1,
	title = {Vertical Pod Autoscaler - Amazon {EKS}},
	url = {https://docs.aws.amazon.com/eks/latest/userguide/vertical-pod-autoscaler.html},
	urldate = {2021-02-02},
}

@online{noauthor_vertical_nodate-2,
	title = {Vertical Pod Autoscaler - Amazon {EKS}},
	url = {https://docs.aws.amazon.com/eks/latest/userguide/vertical-pod-autoscaler.html},
	urldate = {2021-02-02},
}

@online{noauthor_google_nodate,
	title = {Google √úbersetzer},
	url = {https://translate.google.com/translate?hl=de&sl=en&u=https://www.replex.io/blog/kubernetes-in-production-best-practices-for-cluster-autoscaler-hpa-and-vpa&prev=search&pto=aue},
	urldate = {2021-02-02},
}

@online{noauthor_cluster_nodate,
	title = {Cluster Autoscaler - Amazon {EKS}},
	url = {https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html},
	urldate = {2021-02-02},
}

@online{noauthor_horizontal_nodate,
	title = {Horizontal Pod Autoscaler - Amazon {EKS}},
	url = {https://docs.aws.amazon.com/eks/latest/userguide/horizontal-pod-autoscaler.html},
	urldate = {2021-02-02},
}

@online{noauthor_horizontal_nodate-1,
	title = {Horizontal Pod Autoscaler},
	url = {https://kubernetes.io/de/docs/tasks/run-application/horizontal-pod-autoscale/},
	abstract = {Der Horizontal Pod Autoscaler skaliert automatisch die Anzahl der Pods eines Replication Controller, Deployment oder Replikat Set basierend auf der beobachteten {CPU}-Auslastung (oder, mit Unterst√ºtzung von benutzerdefinierter Metriken, von der Anwendung bereitgestellten Metriken). Beachte, dass die horizontale Pod Autoskalierung nicht f√ºr Objekte gilt, die nicht skaliert werden k√∂nnen, z. B. {DaemonSets}.
Der Horizontal Pod Autoscaler ist als Kubernetes {API}-Ressource und einem Controller implementiert. Die Ressource bestimmt das Verhalten des Controllers. Der Controller passt die Anzahl der Replikate eines Replication Controller oder Deployments regelm√§√üig an, um die beobachtete durchschnittliche {CPU}-Auslastung an das vom Benutzer angegebene Ziel anzupassen.},
	titleaddon = {Kubernetes},
	urldate = {2021-02-02},
	langid = {german},
}

@inproceedings{gilani_application_2015,
	title = {Application and network performance of Amazon elastic compute cloud instances},
	doi = {10.1109/CloudNet.2015.7335328},
	abstract = {The computing and networking infrastructure in public clouds is shared between multiple users and can create abnormal variations in the performance of applications running in cloud. In this paper we compare the performance of compute-intensive applications on {CPUs} and {GPUs} offered by Amazon's cloud and show that not all applications exhibit speedups when executed on the {GPU}. Even for applications that exhibit speedup on the {GPU}, the overall application performance may be bottlenecked by network delay. For such cases, the high cost of {GPU} instances is inefficient since it does not improve application performance. We also show that the network performance of different instances can vary significantly overtime and public clouds may throttle network bandwidth for applications that generate significant network traffic.},
	eventtitle = {2015 {IEEE} 4th International Conference on Cloud Networking ({CloudNet})},
	pages = {315--318},
	booktitle = {2015 {IEEE} 4th International Conference on Cloud Networking ({CloudNet})},
	author = {Gilani, M. and Inibhunu, C. and Mahmoud, Q. H.},
	date = {2015-10},
	keywords = {Amazon {EC}2, Amazon elastic compute cloud instance, Bandwidth, Central Processing Unit, Cloud Computing, Cloud computing, Comparing Cloud Services, Conferences, {GPU}, {GPU} instance performance, Graphics processing units, Servers, T2.medium instance performance, Time measurement, cloud computing, computer network management, computer network performance evaluation, delay estimation, graphics processing units, network delay, network performance, network traffic, public cloud},
}

@article{jain_performance_2020,
	title = {Performance Analysis of Various Server Hosting Techniques},
	volume = {173},
	issn = {18770509},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S187705092031512X},
	doi = {10.1016/j.procs.2020.06.010},
	abstract = {{CAlbosutdraCctomputing} is growing exponentially and provides various server hosting services like Virtual Machines, Docker containers and Serverless Architectures. The traditional Virtual Machines ({VMs}) have long-running power with computation power that {aCplpoeuadrsCoonmrpeuqtuinegstiasngdrovwaninisgheexspaoftneernutisael},lyriagnhdt apwroavyi.{dCesonvtaariinoeurss} saerrevcerrehaotesdtinogn {stoerpvoicfeasnliokpeeVraitritnugalsMysatecmhinuessi},{ngDodcokcekrerc};{ownthaiicnhaelrssoanaudtoSmeravteersletshseAdrecphloityemctuenretso}. {fTahpeptlriacdatiitoionnsaol} {nVitrhteumal}. {MSearcvheirnleesss}({VapMplsi})cahtaiovnesloanreg-ervuennnti-ndgripveonwecrlowudit-hbacsoemdpsuytsatteiomnspwohweerretdhea-t vapelpoepamrseonnt orefqaupepslticaantdionvadneispheensdsafcteormupslee,terliyghotnawcoamy.{bCinoinngtaitnheercslaiernetcsriedaet}‚Äôesdloognicto, p3rodf paanrtoiepse‚Äôrasteirnvgicseysstaenmd culsoinugd-dhoocskteedr;rwemhiocthe palrsooceaduutoremcaatellss.{thTehedeSpelrovyemrleensst} Cofonaptapilniecratiinotnesgroantetshdeomc.{kSerercvoenrtlaeisnsearps} pwliicthatsioenrvsearlreesesvaepnptl-idcraivtieonnsc.{loAumd}-{abzaosnedWseybstSeemrvsicwehse}({AreWdSe}){oveÔ¨ÄleorpsmEeCnSt} {owfitahpFpalircgaattieonwdheicphenhdosstcsodmocpkleetreclyonotnaicnoemrsbaisnsinergvethrleescsliaepnpt} lsiicdaet‚Äôisonlos.{gSice},rv3erdrlepsasrtCieosn‚Äôtaseinrveric-aews {aarnedAcRlocuhdi}-tehcotsutreed({SreCmAoRte}) fprraomceedwuorrekc[1al]lsp.{rTovhiedeSsertvheerlseasms} {eCfounntacitnioenrailnittyegoraf} theossdtioncgkedroccoknetracinoenrtsaiwneitrhs {soevrevrerAleWssSaLppamlicbadtiao}.{nOs}.{uAr} {wmoarzkonfoWcuesbesSeornvitchees}({pAeWrfoSr}){moÔ¨ÄaenrcseEaCnSalwysitihs} Foafrvgaartieowushiccohmhpousttse dsoecrvkiecrecsomnteanintieornseads saebrovveerl.{eBssaaspedpliocnattihoensr}.{eSseurlvtserwleesshCavoentaalisnoero}-aÔ¨Äweraerde {AreRcochmitmecetnudraet}({iSoCnsARon}) pfriacmkienwgofrrko[m1]vparroiovuidsessertvheershaomsetinfguntcetcihonniaqluiteys.of hosting docker containers over {AWS} Lambda. Our work focuses on the performance analysis of various compute services mentioned above. Based on the results we have also oÔ¨Äered recommendations on pcic2k0in2g0 {fTrohme} Avuarthioourss.{sPeurvbelrishhoesdtibnygEtelcsehvniieqruBes}.V. .},
	pages = {70--77},
	journaltitle = {Procedia Computer Science},
	shortjournal = {Procedia Computer Science},
	author = {Jain, Prerna and Munjal, Yogesh and Gera, Jatin and Gupta, Pooja},
	urldate = {2021-02-01},
	date = {2020},
	langid = {english},
}

@article{perez_serverless_nodate,
	title = {Serverless Computing for Container-based Architectures},
	abstract = {New architectural patterns (e.g. microservices), the massive adoption of Linux containers (e.g. Docker containers), and improvements in key features of Cloud computing such as auto-scaling, have helped developers to decouple complex and monolithic systems into smaller stateless services. In turn, Cloud providers have introduced serverless computing, where applications can be deÔ¨Åned as a workÔ¨Çow of event-triggered functions. However, serverless services, such as {AWS} Lambda, impose serious restrictions for these applications (e.g. using a predeÔ¨Åned set of programming languages or diÔ¨Éculting the installation and deployment of external libraries). This paper addresses such issues by introducing a framework and a methodology to create Serverless Container-aware {ARchitectures} ({SCAR}). The {SCAR} framework can be used to create highly-parallel eventdriven serverless applications that run on customized runtime environments deÔ¨Åned as Docker images on top of {AWS} Lambda. This paper describes the architecture of {SCAR} together with the cache-based optimizations applied to minimize cost, exempliÔ¨Åed on a massive image processing use case. The results show that, by means of {SCAR}, {AWS} Lambda becomes a convenient platform for High Throughput Computing, specially for highly-parallel bursty workloads of short stateless jobs.},
	pages = {19},
	author = {Perez, Alfonso and Molto, German and Caballer, Miguel and Calatrava, Amanda},
	langid = {english},
}

@online{noauthor_pandas_nodate,
	title = {pandas - Python Data Analysis Library},
	url = {https://pandas.pydata.org/},
	urldate = {2021-01-25},
}

@misc{noauthor_incloud_nodate,
	title = {{INCLOUD} Abschlussarbeit},
	url = {https://incloudde-my.sharepoint.com/personal/robin_luley_incloud_de/Documents/Microsoft%20Teams-Chatdateien/ServerlessvsContainer.pdf},
	urldate = {2021-01-25},
	langid = {german},
}

@article{ajay_joshi_measuring_2006,
	title = {Measuring benchmark similarity using inherent program characteristics},
	volume = {55},
	issn = {1557-9956},
	doi = {10.1109/TC.2006.85},
	abstract = {This paper proposes a methodology for measuring the similarity between programs based on their inherent microarchitecture-independent characteristics, and demonstrates two applications for it: 1) finding a representative subset of programs from benchmark suites and 2) studying the evolution of four generations of {SPEC} {CPU} benchmark suites. Using the proposed methodology, we find a representative subset of programs from three popular benchmark suites - {SPEC} {CPU}2000, {MediaBench}, and {MiBench}. We show that this subset of representative programs can be effectively used to estimate the average benchmark suite {IPC}, L1 data cache miss-rates, and speedup on 11 machines with different {ISAs} and microarchitectures - this enables one to save simulation time with little loss in accuracy. From our study of the similarity between the four generations of {SPEC} {CPU} benchmark suites, we find that, other than a dramatic increase in the dynamic instruction count and increasingly poor temporal data locality, the inherent program characteristics have more or less remained unchanged},
	pages = {769--782},
	number = {6},
	journaltitle = {{IEEE} Transactions on Computers},
	author = {{Ajay Joshi} and {Aashish Phansalkar} and Eeckhout, Lieven and John, Lizy K.},
	date = {2006-06},
	note = {Conference Name: {IEEE} Transactions on Computers},
	keywords = {{IPC}, L1 data cache miss-rates, Measurement techniques, {MediaBench}, {MiBench}, {SPEC} {CPU} benchmark suites, Software performance, benchmark similarity measurement, benchmark testing, inherent microarchitecture-independent characteristics, inherent program characteristics, modeling techniques, performance attributes., performance of systems, software performance evaluation},
}

@article{hoste_microarchitecture-independent_2007,
	title = {Microarchitecture-Independent Workload Characterization},
	volume = {27},
	issn = {1937-4143},
	doi = {10.1109/MM.2007.56},
	abstract = {For computer designers, understanding the characteristics of workloads running on current and future computer systems is of utmost importance during microprocessor design a microarchitecture-independent method ensures an accurate characterization of inherent program behavior and avoids the weaknesses of microarchitecture-dependent metrics.},
	pages = {63--72},
	number = {3},
	journaltitle = {{IEEE} Micro},
	author = {Hoste, Kenneth and Eeckhout, Lieven},
	date = {2007-05},
	note = {Conference Name: {IEEE} Micro},
	keywords = {Application software, Biometrics, Computational modeling, Counting circuits, Design optimization, Hardware, Microarchitecture, Microprocessors, Performance analysis, Solids, computer architecture, computer designers, computer systems, measurement techniques, microarchitecture-independent workload characterization, microprocessor design, microprogramming, modeling techniques, performance attributes, workload characterization},
}

@online{gherorghiu_agile_2005,
	title = {Agile Testing: Performance vs. load vs. stress testing},
	url = {http://agiletesting.blogspot.com/2005/02/performance-vs-load-vs-stress-testing.html},
	shorttitle = {Agile Testing},
	titleaddon = {Agile Testing},
	author = {Gherorghiu, Grig},
	urldate = {2021-01-20},
	date = {2005-02-28},
	langid = {english},
}

@online{jonas_microservices_2016,
	title = {Microservices and Teraflops},
	url = {http://ericjonas.com/post/pywren1/},
	abstract = {Can {AWS} Lambda be used for scientific computing?},
	titleaddon = {Eric Jonas},
	author = {Jonas, Eric},
	urldate = {2021-01-18},
	date = {2016-10-25},
	langid = {english},
}

@article{papadopoulos_methodological_2019,
	title = {Methodological Principles for Reproducible Performance Evaluation in Cloud Computing},
	issn = {1939-3520},
	doi = {10.1109/TSE.2019.2927908},
	abstract = {The rapid adoption and the diversification of cloud computing technology exacerbate the importance of a sound experimental methodology for this domain. This work investigates how to measure and report performance in the cloud, and how well the cloud research community is already doing it. We propose a set of eight important methodological principles that combine best-practices from nearby fields with concepts applicable only to clouds, and with new ideas about the time-accuracy trade-off. We show how these principles are applicable using a practical use-case experiment. To this end, we analyze the ability of the newly released {SPEC} Cloud {IaaS} benchmark to follow the principles, and showcase real-world experimental studies in common cloud environments that meet the principles. Last, we report on a systematic literature review including top conferences and journals in the field, from 2012 to 2017, analyzing if the practice of reporting cloud performance measurements follows the proposed eight principles. Worryingly, this systematic survey and the subsequent two-round human reviews, reveal that few of the published studies follow the eight experimental principles. We conclude that, although these important principles are simple and basic, the cloud community is yet to adopt them broadly to deliver sound measurement of cloud environments.},
	pages = {1--1},
	journaltitle = {{IEEE} Transactions on Software Engineering},
	author = {Papadopoulos, Alessandro V. and Versluis, Laurens and Bauer, Andr√© and Herbst, Nikolas and von Kistowski, J√≥akim and Ali-eldin, Ahmed and Abad, Christina L. and Amaral, Jos√© N. and T≈Øma, Petr and Iosup, Alexandru},
	date = {2019},
	note = {Conference Name: {IEEE} Transactions on Software Engineering},
	keywords = {Benchmark testing, Cloud computing, Computer performance, Experimental evaluation, Performance evaluation, Software engineering, Systematics, experimentation, observation study},
}

@report{eismann_review_2020,
	title = {A Review of Serverless Use Cases and their Characteristics},
	url = {https://research.spec.org/fileadmin/user_upload/documents/rg_cloud/endorsed_publications/SPEC_RG_2020_Serverless_Usecases.pdf},
	abstract = {The serverless computing paradigm promises many desirable properties for cloud applications‚Äî
low-cost, fine-grained deployment, and management-free operation. Consequently, the paradigm
has underwent rapid growth: there currently exist tens of serverless platforms and all global cloud
providers host serverless operations. To help tune existing platforms, guide the design of new
serverless approaches, and overall contribute to understanding this paradigm, in this work we
present a long-term, comprehensive effort to identify, collect, and characterize serverless use
cases. We survey 89 use cases, sourced from white and grey literature, and from consultations
with experts in areas such as scientific computing. We study each use case using 24 characteristics, including general aspects, but also workload, application, and requirements. When the
use cases employ workflows, we further analyze their characteristics. Overall, we hope our study
will be useful for both academia and industry, and encourage the community to further share
and communicate their use cases.},
	pages = {47},
	number = {{SPEC}-{RG}-2020-8},
	institution = {{SPEC}},
	author = {Eismann, Simon and Scheuner, Joel and van Eyk, Erwin and Schwinger, Maximilian and Grohmann, Johannes and Herbst, Nikolas and Abad, Christina L. and Iosup, Alexandru},
	urldate = {2021-01-25},
	date = {2020-04-08},
	langid = {english},
}

@article{martins_benchmarking_nodate,
	title = {Benchmarking Serverless Computing Platforms},
	pages = {19},
	author = {Martins, Hor√°cio and Araujo, Filipe and Rupino da Cunha, Paulo},
	langid = {english},
}

@inreference{noauthor_varianz_2021,
	title = {Varianz (Stochastik)},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://de.wikipedia.org/w/index.php?title=Varianz_(Stochastik)&oldid=207244046},
	abstract = {Die Varianz (lateinisch variantia ‚ÄûVerschiedenheit‚Äú bzw. variare ‚Äû(ver)√§ndern, verschieden sein‚Äú) ist ein Ma√ü f√ºr die Streuung der Wahrscheinlichkeitsdichte um ihren Schwerpunkt. Mathematisch wird sie definiert als die mittlere quadratische Abweichung einer reellen Zufallsvariablen von ihrem Erwartungswert. Sie ist das zentrale Moment zweiter Ordnung einer Zufallsvariablen.
Die Varianz kann physikalisch als Tr√§gheitsmoment interpretiert und mit einem Varianzsch√§tzer, z. B. der Stichprobenvarianz, bestimmt werden. Die Quadratwurzel  der Varianz ist das als Standardabweichung bezeichnete wichtigste Streuungsma√ü in der Stochastik.
Die Bezeichnung ‚ÄûVarianz‚Äú wurde vor allem von dem britischen Statistiker Ronald Fisher (1890‚Äì1962) gepr√§gt. Weitere W√∂rter f√ºr die Varianz sind das veraltete Dispersion (lateinisch dispersio ‚ÄûZerstreuung‚Äú bzw. dispergere ‚Äûverteilen, ausbreiten, zerstreuen‚Äú), das Streuungsquadrat oder die Streuung.
Zu den Eigenschaften der Varianz geh√∂ren, dass sie niemals negativ ist und sich bei Verschiebung der Verteilung nicht √§ndert. Die Varianz einer Summe unkorrelierter Zufallsvariablen ist gleich der Summe ihrer Varianzen. Ein Nachteil der Varianz f√ºr praktische Anwendungen ist, dass sie im Unterschied zur Standardabweichung eine andere Einheit als die Zufallsvariable besitzt. Da sie √ºber ein Integral definiert wird, existiert sie nicht f√ºr alle Verteilungen, d. h., sie kann auch unendlich sein.
Eine Verallgemeinerung der Varianz ist die Kovarianz. Im Unterschied zur Varianz, die die Variabilit√§t der betrachteten Zufallsvariable misst, ist die Kovarianz ein Ma√ü f√ºr die gemeinsame Variabilit√§t von zwei Zufallsvariablen. Aus dieser Definition der Kovarianz folgt, dass die Kovarianz einer Zufallsvariable mit sich selbst gleich der Varianz dieser Zufallsvariablen ist. Im Falle eines reellen Zufallsvektors kann die Varianz zur Varianz-Kovarianzmatrix verallgemeinert werden.},
	booktitle = {Wikipedia},
	urldate = {2021-01-23},
	date = {2021-01-04},
	langid = {german},
	note = {Page Version {ID}: 207244046},
}

@inreference{noauthor_quantil_2020,
	title = {Quantil (Wahrscheinlichkeitstheorie)},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://de.wikipedia.org/w/index.php?title=Quantil_(Wahrscheinlichkeitstheorie)&oldid=205302404},
	abstract = {Ein Quantil ist ein Lagema√ü in der Statistik. Anschaulich ist ein Quantil ein Schwellenwert: ein bestimmter Anteil der Werte ist kleiner als das Quantil, der Rest ist gr√∂√üer. Das 25-\%-Quantil beispielsweise ist der Wert, f√ºr den gilt, dass 25 \% aller Werte kleiner sind als dieser Wert. Quantile formalisieren praktische Aussagen wie ‚Äû25 \% aller Frauen sind kleiner als 1,62 m‚Äú ‚Äì wobei 1,62 m hier das 25-\%-Quantil ist.
Eine bekannte Darstellung und Veranschaulichung einer Quantilfunktion aus der √ñkonometrie ist die Parade der Einkommen (Pen‚Äôs Parade) des √ñkonomen Jan Pen zur Einkommensverteilung.
Genauer ist das 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
  -Quantil, wobei 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   eine reelle Zahl zwischen 0 und 1 ist, ein Wert einer Variablen oder Zufallsvariablen, der die Menge aller Merkmalswerte (salopp ‚Äûdie Verteilung‚Äú) in zwei Abschnitte unterteilt: Links vom 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
  -Quantil liegt der Anteil 
  
    
      
        p
         
        (
        =
        100
        p
        
        \%
        )
      
    
    \{{\textbackslash}displaystyle p{\textbackslash} (=100p{\textbackslash},{\textbackslash}\%)\}
   aller Beobachtungswerte oder der Gesamtzahl der Zufallswerte oder der Fl√§che unter der Dichtekurve; rechts davon liegt der jeweilige restliche Anteil 
  
    
      
        1
        ‚àí
        p
         
        (
        =
        100
        (
        1
        ‚àí
        p
        )
        
        \%
        )
      
    
    \{{\textbackslash}displaystyle 1-p{\textbackslash} (=100(1-p){\textbackslash},{\textbackslash}\%)\}
  . Die Zahl 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   hei√üt auch der Unterschreitungsanteil.
Spezielle Quantile sind der Median, die Quartile, die Quintile, die Dezile und die Perzentile.
Als Quantil der Ordnung 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   oder 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
  -Quantil 
  
    
      
        Q
        (
        p
        )
      
    
    \{{\textbackslash}displaystyle Q(p)\}
   (veraltet auch ‚ÄûFraktil‚Äú) wird in der Statistik ein Merkmalswert bezeichnet, unterhalb dessen ein vorgegebener Anteil 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   aller F√§lle der Verteilung liegt. Jeder Wert unterhalb von 
  
    
      
        Q
        (
        p
        )
      
    
    \{{\textbackslash}displaystyle Q(p)\}
   unterschreitet diesen vorgegebenen Anteil. Dabei kann der Unterschreitungsanteil 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   auch als eine reelle Zahl zwischen 0 (gar kein Fall der Verteilung) und 1 (alle F√§lle bzw. 100 \% der Verteilung) angegeben werden.},
	booktitle = {Wikipedia},
	urldate = {2021-01-23},
	date = {2020-11-08},
	langid = {german},
	note = {Page Version {ID}: 205302404},
}

@inreference{noauthor_verteilungsfunktion_2020,
	title = {Verteilungsfunktion},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://de.wikipedia.org/w/index.php?title=Verteilungsfunktion&oldid=201484998},
	abstract = {Die Verteilungsfunktion ist eine spezielle reelle Funktion in der Stochastik und ein zentrales Konzept bei der Untersuchung von Wahrscheinlichkeitsverteilungen auf den reellen Zahlen. Jeder Wahrscheinlichkeitsverteilung und jeder reellwertigen Zufallsvariable kann eine Verteilungsfunktion zugeordnet werden. Anschaulich entspricht dabei der Wert der Verteilungsfunktion an der Stelle 
  
    
      
        x
      
    
    \{{\textbackslash}displaystyle x\}
   der Wahrscheinlichkeit, dass die zugeh√∂rige Zufallsvariable 
  
    
      
        X
      
    
    \{{\textbackslash}displaystyle X\}
   einen Wert kleiner oder gleich 
  
    
      
        x
      
    
    \{{\textbackslash}displaystyle x\}
   annimmt. Ist beispielsweise die Verteilung der Schuhgr√∂√üen in Europa gegeben, so entspricht der Wert der entsprechenden Verteilungsfunktion bei 45 der Wahrscheinlichkeit, dass ein beliebiger Europ√§er die Schuhgr√∂√üe 45 oder kleiner besitzt.
Ihre Bedeutung erh√§lt die Verteilungsfunktion durch den Korrespondenzsatz, der besagt, dass jeder Verteilungsfunktion eine Wahrscheinlichkeitsverteilung auf den reellen Zahlen zugeordnet werden kann und umgekehrt. Die Zuordnung ist bijektiv. Dies erm√∂glicht es, anstelle der Untersuchung von Wahrscheinlichkeitsverteilungen als Mengenfunktionen auf einem komplexen Mengensystem mit Methoden der Ma√ütheorie die entsprechenden Verteilungsfunktionen zu untersuchen. Diese sind reelle Funktionen und somit √ºber die Methoden der reellen Analysis leichter zug√§nglich.
Als alternative Bezeichnungen finden sich unter anderem kumulierte Verteilungsfunktion, da sie die Wahrscheinlichkeiten kleiner als 
  
    
      
        x
      
    
    \{{\textbackslash}displaystyle x\}
   zu sein anh√§uft, siehe auch kumulierte H√§ufigkeit. Des Weiteren wird sie zur besseren Abgrenzung von ihrem h√∂herdimensionalen Pendant, der multivariaten Verteilungsfunktion, auch als univariate Verteilungsfunktion bezeichnet. In Abgrenzung zum allgemeineren Ma√ütheoretischen Konzept einer Verteilungsfunktion finden sich die Bezeichnungen als wahrscheinlichkeitstheoretische Verteilungsfunktion oder als Verteilungsfunktion im engeren Sinn.Die Entsprechung der Verteilungsfunktion in der deskriptiven Statistik ist die empirische Verteilungs- oder Summenh√§ufigkeitsfunktion.},
	booktitle = {Wikipedia},
	urldate = {2021-01-23},
	date = {2020-07-01},
	langid = {german},
	note = {Page Version {ID}: 201484998},
}

@online{noauthor_data_nodate,
	title = {data visualization - How to read a value-quantile diagram?},
	url = {https://stats.stackexchange.com/questions/64796/how-to-read-a-value-quantile-diagram},
	titleaddon = {Cross Validated},
	urldate = {2021-01-23},
}

@online{noauthor_wie_nodate,
	title = {Wie ist die Statistik zu interpretieren?},
	url = {https://www.rtr.at/TKP/service/rtr-nettest/help/test_result/netztestfaq_testergebnis_1100.de.html},
	titleaddon = {{RTR}},
	urldate = {2021-01-23},
	langid = {german},
}

@incollection{jeffay_using_2003,
	location = {Berlin, Heidelberg},
	title = {Using Latency Quantiles to Engineer {QoS} Guarantees for Web Services},
	volume = {2707},
	isbn = {978-3-540-40281-7 978-3-540-44884-6},
	url = {http://link.springer.com/10.1007/3-540-44884-5_19},
	pages = {345--362},
	booktitle = {Quality of Service ‚Äî {IWQoS} 2003},
	publisher = {Springer Berlin Heidelberg},
	author = {Fiedler, Ulrich and Plattner, Bernhard},
	editor = {Jeffay, Kevin and Stoica, Ion and Wehrle, Klaus},
	urldate = {2021-01-23},
	date = {2003},
	langid = {english},
	doi = {10.1007/3-540-44884-5_19},
	note = {Series Title: Lecture Notes in Computer Science},
}

@book{noauthor_notitle_nodate,
}

@inproceedings{manner_cold_2018,
	title = {Cold Start Influencing Factors in Function as a Service},
	doi = {10.1109/UCC-Companion.2018.00054},
	abstract = {Function as a Service ({FaaS}) is a young and rapidly evolving cloud paradigm. Due to its hardware abstraction, inherent virtualization problems come into play and need an assessment from the {FaaS} point of view. Especially avoidance of idling and scaling on demand cause a lot of container starts and as a consequence a lot of cold starts for {FaaS} users. The aim of this paper is to address the cold start problem in a benchmark and investigate influential factors on the duration of the perceived cold start. We conducted a benchmark on {AWS} Lambda and Microsoft Azure Functions with 49500 cloud function executions. Formulated as hypotheses, the influence of the chosen programming language, platform, memory size for the cloud function, and size of the deployed artifact are the dimensions of our benchmark. Cold starts on the platform as well as the cold starts for users were measured and compared to each other. Our results show that there is an enormous difference for the overhead the user perceives compared to the billed duration. In our benchmark, the average cold start overheads on the user's side ranged from 300ms to 24s for the chosen configurations.},
	eventtitle = {2018 {IEEE}/{ACM} International Conference on Utility and Cloud Computing Companion ({UCC} Companion)},
	pages = {181--188},
	booktitle = {2018 {IEEE}/{ACM} International Conference on Utility and Cloud Computing Companion ({UCC} Companion)},
	author = {Manner, J. and Endre√ü, M. and Heckel, T. and Wirtz, G.},
	date = {2018-12},
	keywords = {{AWS} Lambda, Benchmark testing, Cloud computing, Containers, {FAA}, Function as a Service, Java, Microsoft Azure Functions, Pipelines, Serverless Computing, Function as a Service, {FaaS}, Cloud Functions, Cold Start, Benchmarking, cloud computing, cloud function executions, cold start problem, container starts, virtualisation, virtualization problems},
}

@online{debrie_aws_2019,
	title = {{AWS} {API} Performance Comparison: Serverless vs. Containers vs. {API} Gateway integration},
	url = {https://alexdebrie.com/posts/aws-api-performance-comparison/},
	shorttitle = {{AWS} {API} Performance Comparison},
	abstract = {A performance comparison between three different methods of deploying an {API} on {AWS}},
	author = {{DeBrie}, Alex},
	urldate = {2021-01-22},
	date = {2019-02-20},
	langid = {english},
}

@article{figiela_performance_2018,
	title = {Performance evaluation of heterogeneous cloud functions},
	volume = {30},
	issn = {1532-0634},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.4792},
	doi = {https://doi.org/10.1002/cpe.4792},
	abstract = {Cloud Functions, often called Function-as-a-Service ({FaaS}), pioneered by {AWS} Lambda, are an increasingly popular method of running distributed applications. As in other cloud offerings, cloud functions are heterogeneous due to variations in underlying hardware, runtime systems, as well as resource management and billing models. In this paper, we focus on performance evaluation of cloud functions, taking into account heterogeneity aspects. We developed a cloud function benchmarking framework, consisting of one suite based on Serverless Framework and one based on {HyperFlow}. We deployed the {CPU}-intensive benchmarks: Mersenne Twister and Linpack. We measured the data transfer times between cloud functions and storage, and we measured the lifetime of the runtime environment. We evaluated all the major cloud function providers: {AWS} Lambda, Azure Functions, Google Cloud Functions, and {IBM} Cloud Functions. We made our results available online and continuously updated. We report on the results of the performance evaluation, and we discuss the discovered insights into resource allocation policies.},
	pages = {e4792},
	number = {23},
	journaltitle = {Concurrency and Computation: Practice and Experience},
	author = {Figiela, Kamil and Gajek, Adam and Zima, Adam and Obrok, Beata and Malawski, Maciej},
	urldate = {2021-01-22},
	date = {2018},
	langid = {english},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.4792},
	keywords = {{FaaS}, cloud computing, cloud functions, performance evaluation, serverless},
}

@online{noauthor_increasingcpuloadlvl1_nodate,
	title = {{IncreasingCPULoadLvl}1 - Faastest - Benchmark {FaaS} Providers Powered by Nuweba},
	url = {https://www.faastest.com/},
	abstract = {Daily Tests from serverless provider for speed and performance},
	urldate = {2021-01-22},
}

@online{datadog_11_0000,
	title = {11 facts about real world container use},
	url = {https://www.datadoghq.com/container-report/},
	abstract = {Building on our yearly reports on how our customers are using containers, we are pleased to share our latest research into the use of containers and orchestration technologies like Kubernetes and Amazon {ECS}.},
	titleaddon = {11 facts about real world container use},
	author = {Datadog},
	urldate = {2021-01-21},
	date = {0000},
	langid = {english},
}

@online{datadog_cloud_0400,
	title = {Cloud Monitoring as a Service {\textbar} Datadog},
	url = {https://www.datadoghq.com/},
	abstract = {See metrics from all of your apps, tools \& services in one place with Datadog's cloud monitoring as a service solution. Try it for free.},
	titleaddon = {Cloud Monitoring as a Service},
	author = {Datadog},
	urldate = {2021-01-21},
	date = {0400},
	langid = {english},
}

@online{noauthor_amazon_nodate-1,
	title = {Amazon {EC}2 Instance-Typen ‚Äì Amazon Web Services ({AWS})},
	url = {https://aws.amazon.com/de/ec2/instance-types/},
	abstract = {{AWS} {EC}2 bietet eine breite Palette an Instance-Typen, die es Ihnen erm√∂glichen, Ihre Cloud-Ressourcen gem√§√ü Ihrer Ziel-Workloads zu skalieren. Erfahren Sie, welche Instance-Typen (Instance Types) Sie mit Amazon {EC}2 je nach Anwendung von T2 Instances bis zu M5 anwenden k√∂nnen.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-21},
	langid = {german},
}

@online{noauthor_running_nodate,
	title = {Running large tests},
	url = {https://k6.io/docs/testing-guides/running-large-tests},
	abstract = {How to run large-scale k6 tests without distributed-execution},
	urldate = {2021-01-21},
	langid = {english},
}

@book{molyneaux_art_2014,
	edition = {2},
	title = {The Art of Application Performance Testing, 2nd Edition},
	isbn = {978-1-4919-0054-3},
	url = {https://learning.oreilly.com/library/view/the-art-of/9781491900536/},
	abstract = {Because performance is paramount today, this thoroughly updated guide shows you how to test mission-critical applications for scalability and performance before you deploy them‚Äîwhether it‚Äôs to the cloud or a mobile device. You‚Äôll learn the complete testing process lifecycle step-by-step, along with best practices to plan, coordinate, and conduct performance tests on your applications.},
	publisher = {O'Reilly Media, Inc.},
	author = {Molyneaux, Ian},
	urldate = {2021-01-20},
	date = {2014},
	langid = {english},
}
@inreference{noauthor_stress_2021,
	title = {Stress testing (software)},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Stress_testing_(software)&oldid=1000101442},
	abstract = {Stress testing is a software testing activity that determines the robustness of software by testing beyond the limits of normal operation. Stress testing is particularly important for "mission critical" software, but is used for all types of software. Stress tests commonly put a greater emphasis on robustness, availability, and error handling under a heavy load, than on what would be considered correct behavior under normal circumstances.},
	booktitle = {Wikipedia},
	urldate = {2021-01-20},
	date = {2021-01-13},
	langid = {english},
	note = {Page Version {ID}: 1000101442},
}

@inreference{noauthor_software_2021,
	title = {Software performance testing},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Software_performance_testing&oldid=1000477195},
	abstract = {In software quality assurance, performance testing is in general a testing practice performed to determine how a system performs in terms of responsiveness and stability under a particular workload. It can also serve to investigate, measure, validate or verify other quality attributes of the system, such as scalability, reliability and resource usage.
Performance testing, a subset of performance engineering, is a computer science practice which strives to build performance standards into the implementation, design and architecture of a system.},
	booktitle = {Wikipedia},
	urldate = {2021-01-20},
	date = {2021-01-15},
	langid = {english},
	note = {Page Version {ID}: 1000477195},
}

@online{archiveddocs_performance_nodate,
	title = {Performance Testing Guidance for Web Applications},
	url = {https://docs.microsoft.com/en-us/previous-versions/msp-n-p/bb924375(v=pandp.10)},
	author = {Archiveddocs},
	urldate = {2021-01-20},
	langid = {english},
}

@article{scheuner_function-as--service_2020,
	title = {Function-as-a-Service performance evaluation: A multivocal literature review},
	volume = {170},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121220301527},
	doi = {10.1016/j.jss.2020.110708},
	shorttitle = {Function-as-a-Service performance evaluation},
	abstract = {Function-as-a-Service ({FaaS}) is one form of the serverless cloud computing paradigm and is defined through {FaaS} platforms (e.g., {AWS} Lambda) executing event-triggered code snippets (i.e., functions). Many studies that empirically evaluate the performance of such {FaaS} platforms have started to appear but we are currently lacking a comprehensive understanding of the overall domain. To address this gap, we conducted a multivocal literature review ({MLR}) covering 112 studies from academic (51) and grey (61) literature. We find that existing work mainly studies the {AWS} Lambda platform and focuses on micro-benchmarks using simple functions to measure {CPU} speed and {FaaS} platform overhead (i.e., container cold starts). Further, we discover a mismatch between academic and industrial sources on tested platform configurations, find that function triggers remain insufficiently studied, and identify {HTTP} {API} gateways and cloud storages as the most used external service integrations. Following existing guidelines on experimentation in cloud systems, we discover many flaws threatening the reproducibility of experiments presented in the surveyed studies. We conclude with a discussion of gaps in literature and highlight methodological suggestions that may serve to improve future {FaaS} performance evaluation studies.},
	pages = {110708},
	journaltitle = {Journal of Systems and Software},
	shortjournal = {Journal of Systems and Software},
	author = {Scheuner, Joel and Leitner, Philipp},
	urldate = {2021-01-18},
	date = {2020-12},
	langid = {english},
}

@online{noauthor_elsevier_nodate,
	title = {Elsevier Enhanced Reader},
	url = {https://reader.elsevier.com/reader/sd/pii/S0164121220301527?token=BF70D840C31017306FCC3DD74C948734AB4048F078BC9EB4817D35E053867A27A5660E9318116CB3728A054215F8FD9E},
	urldate = {2021-01-18},
	langid = {english},
	doi = {10.1016/j.jss.2020.110708},
}

@inproceedings{shahrad_architectural_2019,
	location = {Columbus {OH} {USA}},
	title = {Architectural Implications of Function-as-a-Service Computing},
	isbn = {978-1-4503-6938-1},
	url = {https://dl.acm.org/doi/10.1145/3352460.3358296},
	doi = {10.1145/3352460.3358296},
	abstract = {Serverless computing is a rapidly growing cloud application model, popularized by Amazon‚Äôs Lambda platform. Serverless cloud services provide fine-grained provisioning of resources, which scale automatically with user demand. Function-as-a-Service ({FaaS}) applications follow this serverless model, with the developer providing their application as a set of functions which are executed in response to a user- or system-generated event. Functions are designed to be short-lived and execute inside containers or virtual machines, introducing a range of system-level overheads. This paper studies the architectural implications of this emerging paradigm. Using the commercial-grade Apache {OpenWhisk} {FaaS} platform on real servers, this work investigates and identifies the architectural implications of {FaaS} serverless computing. The workloads, along with the way that {FaaS} inherently interleaves short functions from many tenants frustrates many of the locality-preserving architectural structures common in modern processors. In particular, we find that: {FaaS} containerization brings up to 20x slowdown compared to native execution, cold-start can be over 10x a short function‚Äôs execution time, branch mispredictions per kilo-instruction are 20x higher for short functions, memory bandwidth increases by 6x due to the invocation pattern, and {IPC} decreases by as much as 35\% due to inter-function interference. We open-source {FaaSProfiler}, the {FaaS} testing and profiling platform that we developed for this work.},
	eventtitle = {{MICRO} '52: The 52nd Annual {IEEE}/{ACM} International Symposium on Microarchitecture},
	pages = {1063--1075},
	booktitle = {Proceedings of the 52nd Annual {IEEE}/{ACM} International Symposium on Microarchitecture},
	publisher = {{ACM}},
	author = {Shahrad, Mohammad and Balkind, Jonathan and Wentzlaff, David},
	urldate = {2021-01-18},
	date = {2019-10-12},
	langid = {english},
}

@inproceedings{sewak_winning_2018,
	title = {Winning in the Era of Serverless Computing and Function as a Service},
	doi = {10.1109/I2CT.2018.8529465},
	abstract = {Serverless Computing and Function as a Service ({FaaS}) is gaining traction in cloud-based application architectures used by startups and matured organizations alike. Organizations that are keen to leverage modern technology to gain a disruptive edge, optimal efficiency, advanced agility and save cost are adopting these architectural styles rapidly. Cloud service provider offer and dynamically manages the allocation of machine resources in serverless computing. The serverless architectures allows the developers to focus on business logic exclusively without worrying about preparing the runtime, managing deployment and infrastructure related concerns. {FaaS} may be assumed as a subset of Serverless Computing, in which, instead of coding a full-fledged cloud based application, the developer just writes (often small) functions which are piece of code (in one of the multiple programming languages supported by the platform) dedicated to do a focused, often single task that are invoked by triggers. It offers dynamic allocation and scaling of the resources and innovative trigger based costing model. This paper introduces Serverless Computing, and Function as a Service ({FaaS}), explores its advantages and limitations, options available with popular cloud and Platform as a Service ({PaaS}) providers, and emerging use cases and success stories.},
	eventtitle = {2018 3rd International Conference for Convergence in Technology (I2CT)},
	pages = {1--5},
	booktitle = {2018 3rd International Conference for Convergence in Technology (I2CT)},
	author = {Sewak, M. and Singh, S.},
	date = {2018-04},
	keywords = {Amazon {AWS} Lambda, Apache Open Whisk, Cloud computing, Computer architecture, {FAA}, {FaaS}, Function as a Service, Functions as a Service({FaaS}), Google, Google Cloud Functions, {IBM} Cloud Functions, Microservices, Microsoft Azure Functions, Platform as a Service ({PaaS}), Serverless Computing, Servers, Task analysis, cloud computing, cloud service providers, cloud-based application architectures, full-fledged cloud based application, serverless architectures, serverless computing, service-oriented architecture},
}

@inproceedings{van_eyk_spec_2017,
	location = {Las Vegas Nevada},
	title = {The {SPEC} cloud group's research vision on {FaaS} and serverless architectures},
	isbn = {978-1-4503-5434-9},
	url = {https://dl.acm.org/doi/10.1145/3154847.3154848},
	doi = {10.1145/3154847.3154848},
	abstract = {Cloud computing enables an entire ecosystem of developing, composing, and providing {IT} services. An emerging class of cloud-based software architectures, serverless, focuses on providing software architects the ability to execute arbitrary functions with small overhead in server management, as Function-as-a-service ({FaaS}). However useful, serverless and {FaaS} suffer from a community problem that faces every emerging technology, which has indeed also hampered cloud computing a decade ago: lack of clear terminology, and scattered vision about the field. In this work, we address this community problem. We clarify the term serverless, by reducing it to cloud functions as programming units, and a model of executing simple and complex (e.g., workflows of) functions with operations managed primarily by the cloud provider. We propose a research vision, where 4 key directions (perspectives) present 17 technical opportunities and challenges.},
	eventtitle = {Middleware '17: 18th International Middleware Conference},
	pages = {1--4},
	booktitle = {Proceedings of the 2nd International Workshop on Serverless Computing},
	publisher = {{ACM}},
	author = {van Eyk, Erwin and Iosup, Alexandru and Seif, Simon and Th√∂mmes, Markus},
	urldate = {2021-01-18},
	date = {2017-12-11},
	langid = {english},
}

@inproceedings{villamizar_infrastructure_2016,
	title = {Infrastructure Cost Comparison of Running Web Applications in the Cloud Using {AWS} Lambda and Monolithic and Microservice Architectures},
	doi = {10.1109/CCGrid.2016.37},
	abstract = {Large Internet companies like Amazon, Netflix, and {LinkedIn} are using the microservice architecture pattern to deploy large applications in the cloud as a set of small services that can be developed, tested, deployed, scaled, operated and upgraded independently. However, aside from gaining agility, independent development, and scalability, infrastructure costs are a major concern for companies adopting this pattern. This paper presents a cost comparison of a web application developed and deployed using the same scalable scenarios with three different approaches: 1) a monolithic architecture, 2) a microservice architecture operated by the cloud customer, and 3) a microservice architecture operated by the cloud provider. Test results show that microservices can help reduce infrastructure costs in comparison to standard monolithic architectures. Moreover, the use of services specifically designed to deploy and scale microservices reduces infrastructure costs by 70\% or more. Lastly, we also describe the challenges we faced while implementing and deploying microservice applications.},
	eventtitle = {2016 16th {IEEE}/{ACM} International Symposium on Cluster, Cloud and Grid Computing ({CCGrid})},
	pages = {179--182},
	booktitle = {2016 16th {IEEE}/{ACM} International Symposium on Cluster, Cloud and Grid Computing ({CCGrid})},
	author = {Villamizar, M. and Garc√©s, O. and Ochoa, L. and Castro, H. and Salamanca, L. and Verano, M. and Casallas, R. and Gil, S. and Valencia, C. and Zambrano, A. and Lang, M.},
	date = {2016-05},
	keywords = {{AWS} Lambda, {AWS} lambda, Amazon, Amazon Web Services, Cloud computing, Companies, Computer architecture, Internet companies, {LinkedIn}, Logic gates, Netflix, Service-oriented architecture, Time factors, Web applications, Web service, Web services, cloud computing, cloud customer, cloud provider, infrastructure cost comparison, microservice architecture, microservice architecture pattern, microservices, monolithic architecture, scalable applications, service oriented architectures, software architecture, software engineering},
}

@online{noauthor_understanding_2014,
	title = {Understanding Container Reuse in {AWS} Lambda},
	url = {https://aws.amazon.com/blogs/compute/container-reuse-in-lambda/},
	abstract = {Tim Wagner, {AWS} Lambda {AWS} Lambda functions execute in a container (sandbox) that isolates them from other functions and provides the resources, such as memory, specified in the function‚Äôs configuration. In this article we discuss how Lambda creates and reuses these sandboxes, and the impact of those policies on the programming model. Startup The first [‚Ä¶]},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-18},
	date = {2014-12-31},
	langid = {american},
	note = {Section: {AWS} Lambda},
}

@inproceedings{mcgrath_serverless_2017,
	title = {Serverless Computing: Design, Implementation, and Performance},
	doi = {10.1109/ICDCSW.2017.36},
	shorttitle = {Serverless Computing},
	abstract = {We present the design of a novel performance-oriented serverless computing platform implemented in. {NET}, deployed in Microsoft Azure, and utilizing Windows containers as function execution environments. Implementation challenges such as function scaling and container discovery, lifecycle, and reuse are discussed in detail. We propose metrics to evaluate the execution performance of serverless platforms and conduct tests on our prototype as well as {AWS} Lambda, Azure Functions, Google Cloud Functions, and {IBM}'s deployment of Apache {OpenWhisk}. Our measurements show the prototype achieving greater throughput than other platforms at most concurrency levels, and we examine the scaling and instance expiration trends in the implementations. Additionally, we discuss the gaps and limitations in our current design, propose possible solutions, and highlight future research.},
	eventtitle = {2017 {IEEE} 37th International Conference on Distributed Computing Systems Workshops ({ICDCSW})},
	pages = {405--410},
	booktitle = {2017 {IEEE} 37th International Conference on Distributed Computing Systems Workshops ({ICDCSW})},
	author = {{McGrath}, G. and Brenner, P. R.},
	date = {2017-06},
	note = {{ISSN}: 2332-5666},
	keywords = {.{NET}, {AWS} Lambda, Apache {OpenWhisk}, Azure Functions, Containers, {FaaS}, Function-as-a-Service, Google, Google Cloud Functions, {IBM} {OpenWhisk}, {IBM}'s deployment, Metadata, Microsoft Azure, Microsoft Windows (operating systems), Prototypes, Resource management, Runtime, Web services, Windows containers, cloud computing, concurrency (computers), concurrency levels, execution performance evaluation, function execution environments, performance evaluation, performance-oriented serverless computing, serverless computing, serverless performance},
}

@online{moutafis_theres_2020,
	title = {There‚Äôs an ongoing war between containers and serverless computing},
	url = {https://towardsdatascience.com/theres-an-ongoing-war-between-containers-and-serverless-computing-f2ba5379ae26},
	abstract = {But the best option might be using both at the same time},
	titleaddon = {Medium},
	author = {Moutafis, Rhea},
	urldate = {2021-01-18},
	date = {2020-08-26},
	langid = {english},
}

@online{noauthor_deploying_2021,
	title = {Deploying {AWS} Lambda with Docker Containers: I Gave it a Try and Here's My Review},
	url = {https://dashbird.io/blog/deploying-aws-lambda-with-docker/},
	shorttitle = {Deploying {AWS} Lambda with Docker Containers},
	abstract = {You can now build your serverless workloads in a Docker container with {AWS} Lambda. We gave it a try and here's our review (with {ETL} examples).},
	titleaddon = {Dashbird},
	urldate = {2021-01-18},
	date = {2021-01-07},
	langid = {american},
}

@online{noauthor_using_nodate,
	title = {Using Amazon {CloudWatch} Alarms - Amazon {CloudWatch}},
	url = {https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html},
	urldate = {2021-01-15},
}

@article{noauthor_amazon_nodate,
	title = {Amazon {ECS} - User Guide for {AWS} Fargate},
	pages = {395},
	langid = {english},
}

@online{noauthor_task_nodate,
	title = {Task definition parameters - Amazon {ECS}},
	url = {https://docs.aws.amazon.com/AmazonECS/latest/userguide/task_definition_parameters.html#standard_container_definition_params},
	urldate = {2021-01-14},
}

@online{noauthor_sam_nodate,
	title = {Sam Newman - Backends For Frontends},
	url = {https://samnewman.io/patterns/architectural/bff/},
	urldate = {2021-01-14},
}

@online{noauthor_test_nodate,
	title = {Test run 893749 - app.k6.io},
	url = {https://app.k6.io/runs/893749},
	urldate = {2021-01-13},
}

@online{noauthor_introduction_nodate,
	title = {Introduction},
	url = {https://k6.io/docs/test-types/introduction},
	abstract = {Guide to test types},
	urldate = {2021-01-13},
	langid = {english},
}

@online{noauthor_http_nodate,
	title = {{HTTP} response status codes - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/de/docs/Web/HTTP/Status},
	urldate = {2021-01-13},
}

@online{noauthor_response_nodate,
	title = {Response},
	url = {https://k6.io/docs/javascript-api/k6-http/response},
	abstract = {Docs k6 is an open source developer-centric load and performance regression testing tool for cloud native {APIs}, microservices and web sites/apps. Tests are written in {ES}6 {JS} with support for {HTTP}/1.1, {HTTP}/2.0 and {WebSocket} protocols.},
	urldate = {2021-01-13},
	langid = {english},
}

@online{noauthor_metrics_nodate,
	title = {Metrics},
	url = {https://k6.io/docs/using-k6/metrics},
	abstract = {Docs k6 is an open source developer-centric load and performance regression testing tool for cloud native {APIs}, microservices and web sites/apps. Tests are written in {ES}6 {JS} with support for {HTTP}/1.1, {HTTP}/2.0 and {WebSocket} protocols.},
	urldate = {2021-01-13},
	langid = {english},
}

@online{noauthor_load_nodate,
	title = {Load testing for engineering teams {\textbar} k6},
	url = {https://k6.io},
	abstract = {k6 is an open-source load testing tool and cloud service providing the best developer experience for {API} performance testing.},
	urldate = {2021-01-13},
	langid = {english},
}

@online{noauthor_aws_nodate,
	title = {{AWS} Fargate-Preise {\textbar} Serverless Compute Engine {\textbar} Amazon Web Services},
	url = {https://aws.amazon.com/de/fargate/pricing/},
	abstract = {Erfahren Sie mehr √ºber die Preise von {AWS} Fargate f√ºr den Betrieb von Containern auf Amazon {ECS} und {EKS}.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-12},
	langid = {german},
}

@online{noauthor_tracking_2019,
	title = {Tracking the state of {AWS} Lambda functions},
	url = {https://aws.amazon.com/blogs/compute/tracking-the-state-of-lambda-functions/},
	abstract = {{AWS} Lambda functions often require resources from other {AWS} services in order to execute successfully, such as {AWS} Identity and Access Management ({IAM}) roles or Amazon Virtual Private Cloud (Amazon {VPC}) network interfaces. When you create or update a function, Lambda provisions the required resources on your behalf that enable your function to execute. In [‚Ä¶]},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-09},
	date = {2019-11-27},
	langid = {american},
	note = {Section: {AWS} Lambda},
}

@online{noauthor_how_2017,
	title = {How I cut my {AWS} bill by 90\% by going serverless},
	url = {https://www.freecodecamp.org/news/how-i-cut-my-aws-bill-by-90-35c937596f0c/},
	abstract = {by Avner Sorek How I cut my {AWS} bill by 90\% by going {serverlessIn} short, I was able to move my side project ‚Äî an Express.{JS} application ‚Äî from {AWS} Elastic Beanstalk to Lambda+{APIG}. It took me less than a day and it resulted in a {\textasciitilde}90\% reduction of costs.},
	titleaddon = {{freeCodeCamp}.org},
	urldate = {2021-01-08},
	date = {2017-07-30},
	langid = {english},
}

@misc{ken_owens_cncf_2018,
	title = {{CNCF} {WG}-Serverless Whitepaper v1.0},
	url = {https://github.com/cncf/wg-serverless/blob/master/whitepapers/serverless-overview/cncf_serverless_whitepaper_v1.0.pdf},
	author = {{Ken Owens} and {Sarah Allen} and {Ben Browning} and {Lee Calcote} and {Amir Chaudhry} and {Doug Davis} and {Louis Fourie}},
	urldate = {2021-01-08},
	date = {2018},
	langid = {english},
}

@online{noauthor_edge_nodate,
	title = {Edge Computing{\textbar} {CDN}, Global Serverless Code, Distribution {\textbar} {AWS} Lambda@Edge},
	url = {https://aws.amazon.com/de/lambda/edge/},
	abstract = {Lambda@Edge ist eine Funktion von Amazon {CloudFront}, mit der Sie Code global und n√§her bei Ihren Benutzern ausf√ºhren k√∂nnen, ohne Infrastruktur an mehreren Standorten auf der ganzen Welt bereitzustellen oder zu verwalten.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-08},
	langid = {german},
}

@online{noauthor_cloudeventsspec_nodate,
	title = {cloudevents/spec},
	url = {https://github.com/cloudevents/spec},
	abstract = {{CloudEvents} Specification. Contribute to cloudevents/spec development by creating an account on {GitHub}.},
	titleaddon = {{GitHub}},
	urldate = {2021-01-08},
	langid = {english},
}

@online{noauthor_twelve-factor_nodate,
	title = {The Twelve-Factor App},
	url = {https://12factor.net/},
	urldate = {2021-01-08},
}

@online{noauthor_sam_nodate-1,
	title = {Sam Newman - Backends For Frontends},
	url = {https://samnewman.io/patterns/architectural/bff/},
	urldate = {2021-01-08},
}

@inproceedings{adzic_serverless_2017,
	location = {Paderborn Germany},
	title = {Serverless computing: economic and architectural impact},
	isbn = {978-1-4503-5105-8},
	url = {https://dl.acm.org/doi/10.1145/3106237.3117767},
	doi = {10.1145/3106237.3117767},
	shorttitle = {Serverless computing},
	abstract = {Amazon Web Services unveiled their ‚ÄòLambda‚Äô platform in late 2014. Since then, each of the major cloud computing infrastructure providers has released services supporting a similar style of deployment and operation, where rather than deploying and running monolithic services, or dedicated virtual machines, users are able to deploy individual functions, and pay only for the time that their code is actually executing. These technologies are gathered together under the marketing term ‚Äòserverless‚Äô and the providers suggest that they have the potential to significantly change how client/server applications are designed, developed and operated.},
	eventtitle = {{ESEC}/{FSE}'17: Joint Meeting of the European Software Engineering Conference and the {ACM} {SIGSOFT} Symposium on the Foundations of Software Engineering},
	pages = {884--889},
	booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
	publisher = {{ACM}},
	author = {Adzic, Gojko and Chatley, Robert},
	urldate = {2021-01-08},
	date = {2017-08-21},
	langid = {english},
}

@inreference{noauthor_economies_2021,
	title = {Economies of scale},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Economies_of_scale&oldid=997909472},
	abstract = {In microeconomics, economies of scale are the cost advantages that enterprises obtain due to their scale of operation (typically measured by the amount of output produced), with cost per unit of output decreasing with increasing scale. At the basis of economies of scale there may be technical, statistical, organizational or related factors to the degree of market control.
Economies of scale apply to a variety of organizational and business situations and at various levels, such as a production, plant or an entire enterprise. When average costs start falling as output increases, then economies of scale occur.
Some economies of scale, such as capital cost of manufacturing facilities and friction loss of transportation and industrial equipment, have a physical or engineering basis.
Another source of scale economies is the possibility of purchasing inputs at a lower per-unit cost when they are purchased in large quantities.
The economic concept dates back to Adam Smith and the idea of obtaining larger production returns through the use of division of labor. Diseconomies of scale are the opposite.
Economies of scale often have limits, such as passing the optimum design point where costs per additional unit begin to increase.  Common limits include exceeding the nearby raw material supply, such as wood in the lumber, pulp and paper industry. A common limit for a low cost per unit weight commodities is saturating the regional market, thus having to ship product uneconomic distances. Other limits include using energy less efficiently or having a higher defect rate.
Large producers are usually efficient at long runs of a product grade (a commodity) and find it costly to switch grades frequently.  They will, therefore, avoid specialty grades even though they have higher margins.  Often smaller (usually older) manufacturing facilities remain viable by changing from commodity-grade production to specialty products.Economies of scale must be distinguished from economies stemming from an increase in the production of a given plant. When a plant is used below its optimal production capacity, increases in its degree of utilization bring about decreases in the total average cost of production. As noticed, among the others, by Nicholas Georgescu-Roegen (1966) and Nicholas Kaldor (1972) these economies are not economies of scale.},
	booktitle = {Wikipedia},
	urldate = {2021-01-08},
	date = {2021-01-02},
	langid = {english},
	note = {Page Version {ID}: 997909472},
}

@online{noauthor_defining_2017,
	title = {Defining Serverless ‚Äî Part 1},
	url = {https://blog.symphonia.io/posts/2017-06-22_defining-serverless-part-1/},
	abstract = {In case you're new to my articles: Serverless Architecture is a new approach to building systems in the cloud. It incorporates Backends-as-a-Service ({BaaS})‚Ää‚Äî‚Äävendor-hosted, highly scalable, data and logic components to handle our needs for databases, messaging platforms, user management, and more.},
	urldate = {2021-01-08},
	date = {2017-06-22},
	langid = {english},
}

@online{noauthor_cncfwg-serverless_nodate,
	title = {cncf/wg-serverless},
	url = {https://github.com/cncf/wg-serverless},
	abstract = {{CNCF} Serverless {WG}. Contribute to cncf/wg-serverless development by creating an account on {GitHub}.},
	titleaddon = {{GitHub}},
	urldate = {2021-01-08},
	langid = {english},
}

@online{noauthor_deploying_nodate,
	title = {Deploying {AWS} Lambda with Docker Containers: I Gave it a Try and Here's My Review {\textbar} Dashbird},
	url = {https://dashbird.io/blog/deploying-aws-lambda-with-docker/?utm_content=150946872&utm_medium=social&utm_source=twitter&hss_channel=tw-840602408766046208},
	urldate = {2021-01-08},
}

@online{roberts_learning_2017,
	title = {Learning Lambda ‚Äî Part 8},
	url = {https://blog.symphonia.io/posts/2017-11-14_learning-lambda-part-8/},
	abstract = {This is Part 8 of Learning Lambda, a tutorial series about engineering using {AWS} Lambda. To see the other articles in this series please visit the series home page.},
	author = {Roberts, Mike},
	urldate = {2021-01-08},
	date = {2017-11-14},
	langid = {english},
}

@online{adzic_designing_nodate,
	title = {Designing for the Serverless Age},
	url = {https://gojko.net/2017/10/05/serverless-design-gotocph.html},
	abstract = {Video from {GOTO} Copenhagen},
	titleaddon = {Gojko's blog},
	author = {Adzic, Gojko},
	urldate = {2021-01-08},
	langid = {english},
}

@online{noauthor_why_2012,
	title = {Why The Future Of Software And Apps Is Serverless},
	url = {https://readwrite.com/2012/10/15/why-the-future-of-software-and-apps-is-serverless/},
	abstract = {Even with the rise of cloud computing, the world still revolves around servers. That won't last, though. Cloud apps are moving into a serverless world, and that will bring big implications for the creation and distribution of software and applications.},
	titleaddon = {{ReadWrite}},
	urldate = {2021-01-08},
	date = {2012-10-15},
	langid = {american},
}

@online{noauthor_serverlose_nodate,
	title = {Serverlose Datenverarbeitung ‚Äì Amazon Web Services},
	url = {https://aws.amazon.com/de/products/databases/},
	abstract = {Mit der serverlosen Datenverarbeitung k√∂nnen Sie Anwendungen und Services erstellen und ausf√ºhren, ohne sich √ºber Server Gedanken machen zu m√ºssen. F√ºr serverlose Anwendungen m√ºssen Sie keine Server bereitstellen, skalieren und verwalten.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-08},
	langid = {german},
}

@online{roberts_serverless_2018,
	title = {Serverless Architectures},
	url = {https://martinfowler.com/articles/serverless.html},
	abstract = {Serverless architectures are application designs that incorporate third-party ‚ÄúBackend as a Service‚Äù ({BaaS}) services, and/or that include custom code run in managed, ephemeral containers on a ‚ÄúFunctions as a Service‚Äù ({FaaS}) platform. By using these ideas, and related ones like single-page applications, such architectures remove much of the need for a traditional always-on server component. Serverless architectures may benefit from significantly reduced operational cost, complexity, and engineering lead time, at a cost of increased reliance on vendor dependencies and comparatively immature supporting services.},
	titleaddon = {martinfowler.com},
	author = {Roberts, Mike},
	urldate = {2021-01-07},
	date = {2018-05-22},
	langid = {english},
}

@online{noauthor_serverless_nodate,
	title = {The Serverless Application Framework {\textbar} Serverless.com},
	url = {https://serverless.com/},
	abstract = {Build web, mobile and {IoT} applications using {AWS} Lambda and {API} Gateway, Azure Functions, Google Cloud Functions, and more.},
	titleaddon = {serverless},
	urldate = {2021-01-08},
	langid = {english},
}

@online{yusuf_fundamental_2019,
	title = {The Fundamental Problem: Solving .{NET} Lambda Cold Start Part I},
	url = {https://medium.com/thundra/the-fundamental-problem-solving-net-lambda-cold-start-part-i-1ff4400bb6eb},
	shorttitle = {The Fundamental Problem},
	abstract = {As the age-old battle of¬†.{NET}(C\#) vs Java rages on, it is evident that there is still no clear victor albeit Java‚Äôs larger user group‚Ä¶},
	titleaddon = {Medium},
	author = {Yusuf, Sarjeel},
	urldate = {2021-01-08},
	date = {2019-04-19},
	langid = {english},
}

@online{noauthor_bliki_nodate,
	title = {bliki: Serverless},
	url = {https://martinfowler.com/bliki/Serverless.html},
	shorttitle = {bliki},
	abstract = {A brief description of the serverless style of application design, highlighting common features of apps designed in this style.},
	titleaddon = {martinfowler.com},
	urldate = {2021-01-07},
}

@online{noauthor_compute_nodate,
	title = {Compute Services - Overview of Amazon Web Services},
	url = {https://docs.aws.amazon.com/whitepapers/latest/aws-overview/compute-services.html},
	urldate = {2021-01-07},
}

@online{noauthor_aws_nodate-1,
	title = {{AWS} Lambda now supports container images as a packaging format},
	url = {https://aws.amazon.com/about-aws/whats-new/2020/12/aws-lambda-now-supports-container-images-as-a-packaging-format/},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-07},
	langid = {american},
}

@online{noauthor_load_2020,
	title = {Load testing a web application‚Äôs serverless backend},
	url = {https://aws.amazon.com/blogs/compute/load-testing-a-web-applications-serverless-backend/},
	abstract = {In this post, I discuss focus areas for load testing of serverless applications, and highlight two tools commonly used. I show how to configure Artillery with customized functions, and how to run tests to simulate load on the Ask Around Me application.},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-07},
	date = {2020-07-06},
	langid = {american},
	note = {Section: Amazon {API} Gateway},
}

@online{noauthor_home_nodate,
	title = {Home {\textbar} {OpenFaaS} - Serverless Functions Made Simple},
	url = {https://www.openfaas.com/},
	urldate = {2021-01-07},
}
@video{goto_conferences_goto_2018,
	title = {{GOTO} 2018 ‚Ä¢ Confusion in the Land of the Serverless ‚Ä¢ Sam Newman},
	url = {https://www.youtube.com/watch?v=Y6B3Eqlj9Fw},
	abstract = {This presentation was recorded at {GOTO} Amsterdam 2018. \#gotocon \#gotoams
http://gotoams.nl

Sam Newman - Author of "Building Microservices" from O'Reilly

{ABSTRACT}
Serverless computing is the hot new thing. Like any hyped technology, it promises a lot. However questions remain around concept and implementation, especially when you start to compare how we've built systems in the past, and what serverless offers us now. Is Serverless the future, or just the emperor's [...]

Download slides and read the full abstract here:
https://gotoams.nl/2018/sessions/386

https://twitter.com/gotoamst
https://www.facebook.com/{GOTOConference}
http://gotocon.com
\#Serverless \#Security \#{CloudNative}

Looking for a unique learning experience?
Attend the next {GOTO} Conference near you! Get your ticket at http://gotocon.com

{SUBSCRIBE} {TO} {OUR} {CHANNEL} - new videos posted almost daily.
https://www.youtube.com/user/{GotoConf}...},
	author = {{GOTO Conferences}},
	urldate = {2021-01-07},
	date = {2018-08-07},
}

@unpublished{amazon_web_services_become_nodate,
	title = {Become a Serverless Black Belt: Optimizing Your Serverless Applicatio‚Ä¶},
	url = {https://www.slideshare.net/AmazonWebServices/become-a-serverless-black-belt-optimizing-your-serverless-applications-srv401-reinvent-2017},
	shorttitle = {Become a Serverless Black Belt},
	abstract = {Are you an experienced serverless developer who wants a handy guide to unleash},
	author = {Amazon Web Services},
	urldate = {2021-01-07},
}

@misc{amazon_aws_aws_2020,
	title = {{AWS} Lambda - Developer Guide},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/lambda-dg.pdf},
	shorttitle = {lambda-doc},
	author = {{Amazon AWS}},
	date = {2020},
	langid = {english},
}

@online{noauthor_lambda_nodate,
	title = {Lambda Preise ‚Äì Amazon Web Services ({AWS})},
	url = {https://aws.amazon.com/de/lambda/pricing/},
	abstract = {Bei den Preisen f√ºr {AWS} Lambda bezahlen Sie nur f√ºr das, was Sie tats√§chlich nutzen. Abgerechnet wird anhand der Anforderungen f√ºr Ihre Funktionen und der Zeit, w√§hrend der Ihr Code ausgef√ºhrt wird. Finden Sie hier eine √úbersicht der Lambda Preise.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-07},
	langid = {german},
}

@online{noauthor_aws_nodate,
	title = {{AWS} re:Invent 2017: Become a Serverless Black Belt: Optimizing Your Serverless Appli ({SRV}401) - {YouTube}},
	url = {https://www.youtube.com/watch?v=oQFORsso2go&feature=emb_title},
	urldate = {2021-01-07},
}

@online{noauthor_im_2018,
	title = {I‚Äôm afraid you‚Äôre thinking about {AWS} Lambda cold starts all wrong},
	url = {https://theburningmonk.com/2018/01/im-afraid-youre-thinking-about-aws-lambda-cold-starts-all-wrong/},
	abstract = {Learn to build production-ready serverless applications on {AWS}},
	titleaddon = {theburningmonk.com},
	urldate = {2021-01-07},
	date = {2018-01-17},
	langid = {american},
	note = {Section: {API} Gateway},
}

@online{noauthor_lambda_nodate-1,
	title = {Lambda quotas - {AWS} Lambda},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html},
	urldate = {2021-01-07},
}

@online{noauthor_lambda_nodate-2,
	title = {Lambda concepts - {AWS} Lambda},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-concepts.html},
	urldate = {2021-01-07},
}

@online{noauthor_load_2020,
	title = {Load testing a web application‚Äôs serverless backend},
	url = {https://aws.amazon.com/blogs/compute/load-testing-a-web-applications-serverless-backend/},
	abstract = {In this post, I discuss focus areas for load testing of serverless applications, and highlight two tools commonly used. I show how to configure Artillery with customized functions, and how to run tests to simulate load on the Ask Around Me application.},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-07},
	date = {2020-07-06},
	langid = {american},
	note = {Section: Amazon {API} Gateway},
}

@online{noauthor_why_nodate,
	title = {Why we switched from docker to serverless},
	url = {https://serverless.com/blog/why-we-switched-from-docker-to-serverless/},
	abstract = {Why we decided to migrate our services running on docker containers to serverless stack using aws lambda functions and aws api gateway},
	titleaddon = {serverless},
	urldate = {2021-01-06},
	langid = {english},
}

@software{noauthor_nordstromserverless-artillery_2021,
	title = {Nordstrom/serverless-artillery},
	rights = {Apache-2.0 License         ,                 Apache-2.0 License},
	url = {https://github.com/Nordstrom/serverless-artillery},
	abstract = {Combine serverless with artillery and you get serverless-artillery for instant, cheap, and easy performance testing at scale.},
	publisher = {Nordstrom, Inc.},
	urldate = {2021-01-06},
	date = {2021-01-06},
	note = {original-date: 2016-08-12T21:17:28Z},
}

@online{noauthor_icymi_2021,
	title = {{ICYMI}: Serverless Q4 2020},
	url = {https://aws.amazon.com/blogs/compute/icymi-serverless-q4-2020/},
	shorttitle = {{ICYMI}},
	abstract = {Welcome to the 12th edition of the {AWS} Serverless {ICYMI} (in case you missed it) quarterly recap. Every quarter, we share all of the most recent product launches, feature enhancements, blog posts, webinars, Twitch live streams, and other interesting things that you might have missed! In case you missed our last {ICYMI}, check out what [‚Ä¶]},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-06},
	date = {2021-01-04},
	langid = {american},
	note = {Section: Amazon {API} Gateway},
}

@software{casalboni_alexcasalboniaws-lambda-power-tuning_2021,
	title = {alexcasalboni/aws-lambda-power-tuning},
	rights = {Apache-2.0 License         ,                 Apache-2.0 License},
	url = {https://github.com/alexcasalboni/aws-lambda-power-tuning},
	abstract = {{AWS} Lambda Power Tuning is an open-source tool that can help you visualize and fine-tune the memory/power configuration of Lambda functions. It runs in your own {AWS} account},
	author = {Casalboni, Alex},
	urldate = {2021-01-06},
	date = {2021-01-05},
	note = {original-date: 2017-03-27T15:18:12Z},
	keywords = {aws, aws-lambda, cost, performance, serverless, state-machine, stepfunctions, visualization},
}

@online{noauthor_building_2020,
	title = {Building more cost-effective Lambda functions with 1 ms billing},
	url = {https://acloudguru.com/blog/engineering/building-more-cost-effective-lambda-functions-with-1-ms-billing},
	abstract = {This change in the duration granularity provides cost savings for almost all Lambda functions, and this will automatically appear on your {AWS} billing statement.},
	titleaddon = {A Cloud Guru},
	urldate = {2021-01-06},
	date = {2020-12-01},
	langid = {american},
}

@online{noauthor_2020_nodate,
	title = {2020 Magic Quadrant for Cloud Infrastructure \& Platform Services},
	url = {https://pages.awscloud.com/GLOBAL-multi-DL-gartner-mq-cips-2020-learn.html},
	urldate = {2021-01-06},
}

@online{aj_stuyvenberg_breaking_2020,
	title = {{BREAKING} (fine it's a few hours old): Lambda just got per-ms billing! Check your logs, this is a huge savings: (alt: Duration: 35.05 {msBilled} Duration: 36 ms) @goserverless \#Serverless https://t.co/{hVs}0PsDWeM},
	url = {https://twitter.com/astuyve/status/1333601029070483456},
	titleaddon = {@astuyve},
	type = {Tweet},
	author = {{AJ Stuyvenberg}},
	urldate = {2021-01-03},
	date = {2020-01-01},
	langid = {english},
}

@online{noauthor_serverless_nodate,
	title = {Serverless Manifesto},
	url = {https://serverless.com/learn/manifesto/},
	abstract = {Serverless Manifesto},
	titleaddon = {serverless},
	urldate = {2020-12-31},
	langid = {english},
}

@online{noauthor_was_2016,
	title = {Was ist Serverless?},
	url = {https://serverless-stack.com/chapters/de/what-is-serverless.html},
	abstract = {Serverlos bezieht sich auf Anwendungen, bei denen die Verwaltung und Zuordnung von Servern und Ressourcen vollst√§ndig vom Cloud-Anbieter verwaltet wird. Die Abrechnung basiert auf dem tats√§chlichen Verbrauch dieser Ressourcen.},
	titleaddon = {Serverless Stack},
	urldate = {2020-12-31},
	date = {2016-12-23},
	langid = {german},
}

@online{noauthor_was_nodate,
	title = {Was ist Kubernetes?},
	url = {https://kubernetes.io/de/docs/concepts/overview/what-is-kubernetes/},
	abstract = {Diese Seite ist eine √úbersicht √ºber Kubernetes.
Kubernetes ist eine portable, erweiterbare Open-Source-Plattform zur Verwaltung von containerisierten Arbeitslasten und Services, die sowohl die deklarative Konfiguration als auch die Automatisierung erleichtert. Es hat einen gro√ües, schnell wachsendes √ñkosystem. Kubernetes Dienstleistungen, Support und Tools sind weit verbreitet.
Google hat das Kubernetes-Projekt 2014 als Open-Source-Projekt zur Verf√ºgung gestellt. Kubernetes baut auf anderthalb Jahrzehnten Erfahrung auf, die Google mit der Ausf√ºhrung von Produktions-Workloads in gro√üem Ma√üstab hat, kombiniert mit den besten Ideen und Praktiken der Community.},
	titleaddon = {Kubernetes},
	urldate = {2020-12-31},
	langid = {german},
}

@online{noauthor_was_nodate-1,
	title = {Was ist Container-Orchestrierung?},
	url = {https://www.redhat.com/de/topics/containers/what-is-container-orchestration},
	abstract = {Mit der Container-Orchestrierung wird die Bereitstellung, Verwaltung, Skalierung und Vernetzung von Containern automatisiert.},
	urldate = {2020-12-31},
	langid = {german},
}

@online{noauthor_what_nodate,
	title = {What is a Container? {\textbar} App Containerization {\textbar} Docker},
	url = {https://www.docker.com/resources/what-container},
	shorttitle = {What is a Container?},
	abstract = {A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. Learn more.},
	urldate = {2020-12-31},
	langid = {english},
}

@inproceedings{kratzke_clouns_2016,
	title = {{ClouNS} - a Cloud-Native Application Reference Model for Enterprise Architects},
	doi = {10.1109/EDOCW.2016.7584353},
	abstract = {The capability to operate cloud-native applications can generate enormous business growth and value. But enterprise architects should be aware that cloud-native applications are vulnerable to vendor lock-in. We investigated cloud-native application design principles, public cloud service providers, and industrial cloud standards. All results indicate that most cloud service categories seem to foster vendor lock-in situations which might be especially problematic for enterprise architectures. This might sound disillusioning at first. However, we present a reference model for cloud-native applications that relies only on a small subset of well standardized {IaaS} services. The reference model can be used for codifying cloud technologies. It can guide technology identification, classification, adoption, research and development processes for cloud-native application and for vendor lock-in aware enterprise architecture engineering methodologies.},
	eventtitle = {2016 {IEEE} 20th International Enterprise Distributed Object Computing Workshop ({EDOCW})},
	pages = {1--10},
	booktitle = {2016 {IEEE} 20th International Enterprise Distributed Object Computing Workshop ({EDOCW})},
	author = {Kratzke, N. and Peinl, R.},
	date = {2016-09},
	note = {{ISSN}: 2325-6605},
	keywords = {Business, {ClouNS}, Cloud computing, Computer architecture, Containers, {IaaS} service, Interoperability, Standards, business data processing, cloud computing, cloud technology, cloud-native application design principle, cloud-native application reference model, industrial cloud standard, public cloud service provider, vendor lock-in aware enterprise architecture engineering},
}

@online{noauthor_cncftoc_nodate,
	title = {cncf/toc},
	url = {https://github.com/cncf/toc},
	abstract = {‚öñÔ∏èTechnical Oversight Committee ({TOC}). Contribute to cncf/toc development by creating an account on {GitHub}.},
	titleaddon = {{GitHub}},
	urldate = {2020-12-29},
	langid = {english},
}

@misc{mell_nist_2011,
	title = {The {NIST} Definition of Cloud Computing},
	url = {https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-145.pdf},
	author = {Mell, Peter and Grance, Timothy},
	urldate = {2020-12-29},
	date = {2011-09},
	langid = {english},
}

@online{noauthor_citations_nodate,
	title = {citations - Can I include just a folder from Zotero into Overleaf instead of my entire library?},
	url = {https://academia.stackexchange.com/questions/144088/can-i-include-just-a-folder-from-zotero-into-overleaf-instead-of-my-entire-libra},
	titleaddon = {Academia Stack Exchange},
	urldate = {2020-12-29},
}