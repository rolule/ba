@misc{mell_nist_2011,
	title = {The {NIST} {Definition} of {Cloud} {Computing}},
	url = {https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-145.pdf},
	language = {en},
	urldate = {2020-12-29},
	author = {Mell, Peter and Grance, Timothy},
	month = sep,
	year = {2011},
	file = {Mell und Grance - The NIST Definition of Cloud Computing.pdf:/Users/robin/Zotero/storage/ZWI6CHUT/Mell und Grance - The NIST Definition of Cloud Computing.pdf:application/pdf},
}

@misc{noauthor_cncftoc_nodate,
	title = {cncf/toc},
	url = {https://github.com/cncf/toc},
	abstract = {⚖️Technical Oversight Committee (TOC). Contribute to cncf/toc development by creating an account on GitHub.},
	language = {en},
	urldate = {2020-12-29},
	journal = {GitHub},
	file = {Snapshot:/Users/robin/Zotero/storage/PX47SZH2/DEFINITION.html:text/html},
}

@inproceedings{kratzke_clouns_2016,
	title = {{ClouNS} - a {Cloud}-{Native} {Application} {Reference} {Model} for {Enterprise} {Architects}},
	doi = {10.1109/EDOCW.2016.7584353},
	abstract = {The capability to operate cloud-native applications can generate enormous business growth and value. But enterprise architects should be aware that cloud-native applications are vulnerable to vendor lock-in. We investigated cloud-native application design principles, public cloud service providers, and industrial cloud standards. All results indicate that most cloud service categories seem to foster vendor lock-in situations which might be especially problematic for enterprise architectures. This might sound disillusioning at first. However, we present a reference model for cloud-native applications that relies only on a small subset of well standardized IaaS services. The reference model can be used for codifying cloud technologies. It can guide technology identification, classification, adoption, research and development processes for cloud-native application and for vendor lock-in aware enterprise architecture engineering methodologies.},
	booktitle = {2016 {IEEE} 20th {International} {Enterprise} {Distributed} {Object} {Computing} {Workshop} ({EDOCW})},
	author = {Kratzke, N. and Peinl, R.},
	month = sep,
	year = {2016},
	note = {ISSN: 2325-6605},
	keywords = {cloud computing, Containers, Business, business data processing, Cloud computing, cloud technology, cloud-native application design principle, cloud-native application reference model, ClouNS, Computer architecture, IaaS service, industrial cloud standard, Interoperability, public cloud service provider, Standards, vendor lock-in aware enterprise architecture engineering},
	pages = {1--10},
	file = {IEEE Xplore Full Text PDF:/Users/robin/Zotero/storage/UBVJ2L9Y/Kratzke und Peinl - 2016 - ClouNS - a Cloud-Native Application Reference Mode.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/GRZC92KQ/7584353.html:text/html},
}

@misc{noauthor_what_nodate,
	title = {What is a {Container}? {\textbar} {App} {Containerization} {\textbar} {Docker}},
	shorttitle = {What is a {Container}?},
	url = {https://www.docker.com/resources/what-container},
	abstract = {A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. Learn more.},
	language = {en},
	urldate = {2020-12-31},
	file = {Snapshot:/Users/robin/Zotero/storage/A3NPLU3P/what-container.html:text/html},
}

@misc{noauthor_was_nodate,
	title = {Was ist {Container}-{Orchestrierung}?},
	url = {https://www.redhat.com/de/topics/containers/what-is-container-orchestration},
	abstract = {Mit der Container-Orchestrierung wird die Bereitstellung, Verwaltung, Skalierung und Vernetzung von Containern automatisiert.},
	language = {de},
	urldate = {2020-12-31},
	file = {Snapshot:/Users/robin/Zotero/storage/35GIFJM2/what-is-container-orchestration.html:text/html},
}

@misc{noauthor_was_nodate-1,
	title = {Was ist {Kubernetes}?},
	url = {https://kubernetes.io/de/docs/concepts/overview/what-is-kubernetes/},
	abstract = {Diese Seite ist eine Übersicht über Kubernetes.
Kubernetes ist eine portable, erweiterbare Open-Source-Plattform zur Verwaltung von containerisierten Arbeitslasten und Services, die sowohl die deklarative Konfiguration als auch die Automatisierung erleichtert. Es hat einen großes, schnell wachsendes Ökosystem. Kubernetes Dienstleistungen, Support und Tools sind weit verbreitet.
Google hat das Kubernetes-Projekt 2014 als Open-Source-Projekt zur Verfügung gestellt. Kubernetes baut auf anderthalb Jahrzehnten Erfahrung auf, die Google mit der Ausführung von Produktions-Workloads in großem Maßstab hat, kombiniert mit den besten Ideen und Praktiken der Community.},
	language = {de},
	urldate = {2020-12-31},
	journal = {Kubernetes},
	file = {Snapshot:/Users/robin/Zotero/storage/D3DQUQMZ/what-is-kubernetes.html:text/html},
}

@misc{noauthor_was_2016,
	title = {Was ist {Serverless}?},
	url = {https://serverless-stack.com/chapters/de/what-is-serverless.html},
	abstract = {Serverlos bezieht sich auf Anwendungen, bei denen die Verwaltung und Zuordnung von Servern und Ressourcen vollständig vom Cloud-Anbieter verwaltet wird. Die Abrechnung basiert auf dem tatsächlichen Verbrauch dieser Ressourcen.},
	language = {de},
	urldate = {2020-12-31},
	journal = {Serverless Stack},
	month = dec,
	year = {2016},
	file = {Snapshot:/Users/robin/Zotero/storage/5KDDMGXW/what-is-serverless.html:text/html},
}

@misc{noauthor_serverless_nodate,
	title = {Serverless {Manifesto}},
	url = {https://serverless.com/learn/manifesto/},
	abstract = {Serverless Manifesto},
	language = {en},
	urldate = {2020-12-31},
	journal = {serverless},
	file = {Snapshot:/Users/robin/Zotero/storage/T7GCYUZF/manifesto.html:text/html},
}

@misc{aj_stuyvenberg_breaking_2020,
	type = {Tweet},
	title = {{BREAKING} (fine it's a few hours old): {Lambda} just got per-ms billing! {Check} your logs, this is a huge savings: (alt: {Duration}: 35.05 {msBilled} {Duration}: 36 ms) @goserverless \#{Serverless} https://t.co/{hVs0PsDWeM}},
	url = {https://twitter.com/astuyve/status/1333601029070483456},
	language = {en},
	urldate = {2021-01-03},
	journal = {@astuyve},
	author = {{AJ Stuyvenberg}},
	month = jan,
	year = {2020},
	file = {Snapshot:/Users/robin/Zotero/storage/RHJ7DQRZ/1333601029070483456.html:text/html},
}

@misc{malishev_aws_2019,
	title = {{AWS} {Lambda} {Cold} {Start} {Language} {Comparisons}, 2019 edition ☃️ {\textbar} by {Nathan} {Malishev} {\textbar} {Level} {Up} {Coding}},
	url = {https://levelup.gitconnected.com/aws-lambda-cold-start-language-comparisons-2019-edition-%EF%B8%8F-1946d32a0244},
	urldate = {2021-01-03},
	author = {Malishev, Nathan},
	month = sep,
	year = {2019},
	file = {AWS Lambda Cold Start Language Comparisons, 2019 edition ☃️ | by Nathan Malishev | Level Up Coding:/Users/robin/Zotero/storage/YZ2R8U6Y/aws-lambda-cold-start-language-comparisons-2019-edition-️-1946d32a0244.html:text/html},
}

@misc{noauthor_2020_nodate,
	title = {2020 {Magic} {Quadrant} for {Cloud} {Infrastructure} \& {Platform} {Services}},
	url = {https://pages.awscloud.com/GLOBAL-multi-DL-gartner-mq-cips-2020-learn.html},
	urldate = {2021-01-06},
}

@misc{noauthor_building_2020,
	title = {Building more cost-effective {Lambda} functions with 1 ms billing},
	url = {https://acloudguru.com/blog/engineering/building-more-cost-effective-lambda-functions-with-1-ms-billing},
	abstract = {This change in the duration granularity provides cost savings for almost all Lambda functions, and this will automatically appear on your AWS billing statement.},
	language = {en-US},
	urldate = {2021-01-06},
	journal = {A Cloud Guru},
	month = dec,
	year = {2020},
	file = {Snapshot:/Users/robin/Zotero/storage/PQGINDK6/building-more-cost-effective-lambda-functions-with-1-ms-billing.html:text/html},
}

@misc{casalboni_alexcasalboniaws-lambda-power-tuning_2021,
	title = {alexcasalboni/aws-lambda-power-tuning},
	copyright = {Apache-2.0 License         ,                 Apache-2.0 License},
	url = {https://github.com/alexcasalboni/aws-lambda-power-tuning},
	abstract = {AWS Lambda Power Tuning is an open-source tool that can help you visualize and fine-tune the memory/power configuration of Lambda functions. It runs in your own AWS account},
	urldate = {2021-01-06},
	author = {Casalboni, Alex},
	month = jan,
	year = {2021},
	note = {original-date: 2017-03-27T15:18:12Z},
	keywords = {aws, aws-lambda, cost, performance, serverless, state-machine, stepfunctions, visualization},
}

@misc{noauthor_icymi_2021,
	title = {{ICYMI}: {Serverless} {Q4} 2020},
	shorttitle = {{ICYMI}},
	url = {https://aws.amazon.com/blogs/compute/icymi-serverless-q4-2020/},
	abstract = {Welcome to the 12th edition of the AWS Serverless ICYMI (in case you missed it) quarterly recap. Every quarter, we share all of the most recent product launches, feature enhancements, blog posts, webinars, Twitch live streams, and other interesting things that you might have missed! In case you missed our last ICYMI, check out what […]},
	language = {en-US},
	urldate = {2021-01-06},
	journal = {Amazon Web Services},
	month = jan,
	year = {2021},
	note = {Section: Amazon API Gateway},
	file = {Snapshot:/Users/robin/Zotero/storage/JJIJ87NH/icymi-serverless-q4-2020.html:text/html},
}

@misc{noauthor_nordstromserverless-artillery_2021,
	title = {Nordstrom/serverless-artillery},
	copyright = {Apache-2.0 License         ,                 Apache-2.0 License},
	url = {https://github.com/Nordstrom/serverless-artillery},
	abstract = {Combine serverless with artillery and you get serverless-artillery for instant, cheap, and easy performance testing at scale.},
	urldate = {2021-01-06},
	publisher = {Nordstrom, Inc.},
	month = jan,
	year = {2021},
	note = {original-date: 2016-08-12T21:17:28Z},
}

@misc{noauthor_why_nodate,
	title = {Why we switched from docker to serverless},
	url = {https://serverless.com/blog/why-we-switched-from-docker-to-serverless/},
	abstract = {Why we decided to migrate our services running on docker containers to serverless stack using aws lambda functions and aws api gateway},
	language = {en},
	urldate = {2021-01-06},
	journal = {serverless},
	file = {Snapshot:/Users/robin/Zotero/storage/HRKGQT5N/why-we-switched-from-docker-to-serverless.html:text/html},
}

@misc{noauthor_load_2020,
	title = {Load testing a web application’s serverless backend},
	url = {https://aws.amazon.com/blogs/compute/load-testing-a-web-applications-serverless-backend/},
	abstract = {In this post, I discuss focus areas for load testing of serverless applications, and highlight two tools commonly used. I show how to configure Artillery with customized functions, and how to run tests to simulate load on the Ask Around Me application.},
	language = {en-US},
	urldate = {2021-01-07},
	journal = {Amazon Web Services},
	month = jul,
	year = {2020},
	note = {Section: Amazon API Gateway},
}

@misc{noauthor_lambda_nodate,
	title = {Lambda concepts - {AWS} {Lambda}},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-concepts.html},
	urldate = {2021-01-07},
	file = {Lambda concepts - AWS Lambda:/Users/robin/Zotero/storage/3D9936ZM/gettingstarted-concepts.html:text/html},
}

@misc{noauthor_lambda_nodate-1,
	title = {Lambda quotas - {AWS} {Lambda}},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html},
	urldate = {2021-01-07},
}

@misc{amazon_aws_aws_2020,
	title = {{AWS} {Lambda} - {Developer} {Guide}},
	shorttitle = {lambda-doc},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/lambda-dg.pdf},
	language = {en},
	author = {{Amazon AWS}},
	year = {2020},
	file = {CloudFormation und Sam - AWS Lambda - Developer Guide.pdf:/Users/robin/Zotero/storage/UIQ2LSTD/CloudFormation und Sam - AWS Lambda - Developer Guide.pdf:application/pdf},
}

@misc{noauthor_im_2018,
	title = {I’m afraid you’re thinking about {AWS} {Lambda} cold starts all wrong},
	url = {https://theburningmonk.com/2018/01/im-afraid-youre-thinking-about-aws-lambda-cold-starts-all-wrong/},
	abstract = {Learn to build production-ready serverless applications on AWS},
	language = {en-US},
	urldate = {2021-01-07},
	journal = {theburningmonk.com},
	month = jan,
	year = {2018},
	note = {Section: API Gateway},
	file = {Snapshot:/Users/robin/Zotero/storage/CRI79HGT/im-afraid-youre-thinking-about-aws-lambda-cold-starts-all-wrong.html:text/html},
}

@misc{malishev_aws_2018,
	title = {{AWS} {Lambda}’s \& {VPC} cold starts — {The} dark side 🕶 ⛈},
	url = {https://levelup.gitconnected.com/lambda-vpc-cold-starts-a-latency-killer-5408323278dd},
	abstract = {All serverless computing suffers from the dreaded “cold start”, and AWS Lambda is no different. I’ve explored cold starts before in a…},
	language = {en},
	urldate = {2021-01-07},
	journal = {Medium},
	author = {Malishev, Nathan},
	month = jun,
	year = {2018},
	file = {Snapshot:/Users/robin/Zotero/storage/BIM5934D/lambda-vpc-cold-starts-a-latency-killer-5408323278dd.html:text/html},
}

@misc{noauthor_aws_nodate,
	title = {{AWS} re:{Invent} 2017: {Become} a {Serverless} {Black} {Belt}: {Optimizing} {Your} {Serverless} {Appli} ({SRV401}) - {YouTube}},
	url = {https://www.youtube.com/watch?v=oQFORsso2go&feature=emb_title},
	urldate = {2021-01-07},
	file = {AWS re\:Invent 2017\: Become a Serverless Black Belt\: Optimizing Your Serverless Appli (SRV401) - YouTube:/Users/robin/Zotero/storage/CEYT9VVW/watch.html:text/html},
}

@misc{noauthor_lambda_nodate-2,
	title = {Lambda {Preise} – {Amazon} {Web} {Services} ({AWS})},
	url = {https://aws.amazon.com/de/lambda/pricing/},
	abstract = {Bei den Preisen für AWS Lambda bezahlen Sie nur für das, was Sie tatsächlich nutzen. Abgerechnet wird anhand der Anforderungen für Ihre Funktionen und der Zeit, während der Ihr Code ausgeführt wird. Finden Sie hier eine Übersicht der Lambda Preise.},
	language = {de-DE},
	urldate = {2021-01-07},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/robin/Zotero/storage/ALGTSAIY/pricing.html:text/html},
}

@misc{amazon_web_services_become_nodate,
	title = {Become a {Serverless} {Black} {Belt}: {Optimizing} {Your} {Serverless} {Applicatio}…},
	shorttitle = {Become a {Serverless} {Black} {Belt}},
	url = {https://www.slideshare.net/AmazonWebServices/become-a-serverless-black-belt-optimizing-your-serverless-applications-srv401-reinvent-2017},
	abstract = {Are you an experienced serverless developer who wants a handy guide to unleash},
	urldate = {2021-01-07},
	author = {Amazon Web Services},
}

@misc{roberts_serverless_2018,
	title = {Serverless {Architectures}},
	url = {https://martinfowler.com/articles/serverless.html},
	abstract = {Serverless architectures are application designs that incorporate third-party “Backend as a Service” (BaaS) services, and/or that include custom code run in managed, ephemeral containers on a “Functions as a Service” (FaaS) platform. By using these ideas, and related ones like single-page applications, such architectures remove much of the need for a traditional always-on server component. Serverless architectures may benefit from significantly reduced operational cost, complexity, and engineering lead time, at a cost of increased reliance on vendor dependencies and comparatively immature supporting services.},
	language = {en},
	urldate = {2021-01-07},
	journal = {martinfowler.com},
	author = {Roberts, Mike},
	month = may,
	year = {2018},
	file = {Snapshot:/Users/robin/Zotero/storage/3NYF7UA5/serverless.html:text/html},
}

@misc{goto_conferences_goto_2018,
	title = {{GOTO} 2018 • {Confusion} in the {Land} of the {Serverless} • {Sam} {Newman}},
	url = {https://www.youtube.com/watch?v=Y6B3Eqlj9Fw},
	abstract = {This presentation was recorded at GOTO Amsterdam 2018. \#gotocon \#gotoams
http://gotoams.nl

Sam Newman - Author of "Building Microservices" from O'Reilly

ABSTRACT
Serverless computing is the hot new thing. Like any hyped technology, it promises a lot. However questions remain around concept and implementation, especially when you start to compare how we've built systems in the past, and what serverless offers us now. Is Serverless the future, or just the emperor's [...]

Download slides and read the full abstract here:
https://gotoams.nl/2018/sessions/386

https://twitter.com/gotoamst
https://www.facebook.com/GOTOConference
http://gotocon.com
\#Serverless \#Security \#CloudNative

Looking for a unique learning experience?
Attend the next GOTO Conference near you! Get your ticket at http://gotocon.com

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConf...},
	urldate = {2021-01-07},
	author = {{GOTO Conferences}},
	month = aug,
	year = {2018},
}

@misc{noauthor_home_nodate,
	title = {Home {\textbar} {OpenFaaS} - {Serverless} {Functions} {Made} {Simple}},
	url = {https://www.openfaas.com/},
	urldate = {2021-01-07},
	file = {Home | OpenFaaS - Serverless Functions Made Simple:/Users/robin/Zotero/storage/8UFE3WFY/www.openfaas.com.html:text/html},
}

@misc{noauthor_load_2020-1,
	title = {Load testing a web application’s serverless backend},
	url = {https://aws.amazon.com/blogs/compute/load-testing-a-web-applications-serverless-backend/},
	abstract = {In this post, I discuss focus areas for load testing of serverless applications, and highlight two tools commonly used. I show how to configure Artillery with customized functions, and how to run tests to simulate load on the Ask Around Me application.},
	language = {en-US},
	urldate = {2021-01-07},
	journal = {Amazon Web Services},
	month = jul,
	year = {2020},
	note = {Section: Amazon API Gateway},
	file = {Snapshot:/Users/robin/Zotero/storage/6UCHM8KK/load-testing-a-web-applications-serverless-backend.html:text/html},
}

@misc{noauthor_aws_nodate-1,
	title = {{AWS} {Lambda} now supports container images as a packaging format},
	url = {https://aws.amazon.com/about-aws/whats-new/2020/12/aws-lambda-now-supports-container-images-as-a-packaging-format/},
	language = {en-US},
	urldate = {2021-01-07},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/robin/Zotero/storage/X56S3BPH/aws-lambda-now-supports-container-images-as-a-packaging-format.html:text/html},
}

@misc{noauthor_compute_nodate,
	title = {Compute {Services} - {Overview} of {Amazon} {Web} {Services}},
	url = {https://docs.aws.amazon.com/whitepapers/latest/aws-overview/compute-services.html},
	urldate = {2021-01-07},
	file = {Compute Services - Overview of Amazon Web Services:/Users/robin/Zotero/storage/BQQXGEA4/compute-services.html:text/html},
}

@misc{noauthor_bliki_nodate,
	title = {bliki: {Serverless}},
	shorttitle = {bliki},
	url = {https://martinfowler.com/bliki/Serverless.html},
	abstract = {A brief description of the serverless style of application design, highlighting common features of apps designed in this style.},
	urldate = {2021-01-07},
	journal = {martinfowler.com},
	file = {Snapshot:/Users/robin/Zotero/storage/S29URH9F/Serverless.html:text/html},
}

@misc{yusuf_fundamental_2019,
	title = {The {Fundamental} {Problem}: {Solving} .{NET} {Lambda} {Cold} {Start} {Part} {I}},
	shorttitle = {The {Fundamental} {Problem}},
	url = {https://medium.com/thundra/the-fundamental-problem-solving-net-lambda-cold-start-part-i-1ff4400bb6eb},
	abstract = {As the age-old battle of .NET(C\#) vs Java rages on, it is evident that there is still no clear victor albeit Java’s larger user group…},
	language = {en},
	urldate = {2021-01-08},
	journal = {Medium},
	author = {Yusuf, Sarjeel},
	month = apr,
	year = {2019},
	file = {Snapshot:/Users/robin/Zotero/storage/5V9ZZIAN/the-fundamental-problem-solving-net-lambda-cold-start-part-i-1ff4400bb6eb.html:text/html},
}

@misc{noauthor_serverless_nodate-1,
	title = {The {Serverless} {Application} {Framework} {\textbar} {Serverless}.com},
	url = {https://serverless.com/},
	abstract = {Build web, mobile and IoT applications using AWS Lambda and API Gateway, Azure Functions, Google Cloud Functions, and more.},
	language = {en},
	urldate = {2021-01-08},
	journal = {serverless},
	file = {Snapshot:/Users/robin/Zotero/storage/8VSNY8M9/www.serverless.com.html:text/html},
}

@misc{noauthor_serverlose_nodate,
	title = {Serverlose {Datenverarbeitung} – {Amazon} {Web} {Services}},
	url = {https://aws.amazon.com/de/products/databases/},
	abstract = {Mit der serverlosen Datenverarbeitung können Sie Anwendungen und Services erstellen und ausführen, ohne sich über Server Gedanken machen zu müssen. Für serverlose Anwendungen müssen Sie keine Server bereitstellen, skalieren und verwalten.},
	language = {de-DE},
	urldate = {2021-01-08},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/robin/Zotero/storage/M3J599JA/serverless.html:text/html},
}

@misc{noauthor_why_2012,
	title = {Why {The} {Future} {Of} {Software} {And} {Apps} {Is} {Serverless}},
	url = {https://readwrite.com/2012/10/15/why-the-future-of-software-and-apps-is-serverless/},
	abstract = {Even with the rise of cloud computing, the world still revolves around servers. That won't last, though. Cloud apps are moving into a serverless world, and that will bring big implications for the creation and distribution of software and applications.},
	language = {en-US},
	urldate = {2021-01-08},
	journal = {ReadWrite},
	month = oct,
	year = {2012},
}

@misc{adzic_designing_nodate,
	title = {Designing for the {Serverless} {Age}},
	url = {https://gojko.net/2017/10/05/serverless-design-gotocph.html},
	abstract = {Video from GOTO Copenhagen},
	language = {en},
	urldate = {2021-01-08},
	journal = {Gojko's blog},
	author = {Adzic, Gojko},
	file = {Snapshot:/Users/robin/Zotero/storage/6YXBT4BK/serverless-design-gotocph.html:text/html},
}

@misc{roberts_learning_2017,
	title = {Learning {Lambda} — {Part} 8},
	url = {https://blog.symphonia.io/posts/2017-11-14_learning-lambda-part-8/},
	abstract = {This is Part 8 of Learning Lambda, a tutorial series about engineering using AWS Lambda. To see the other articles in this series please visit the series home page.},
	language = {en-us},
	urldate = {2021-01-08},
	author = {Roberts, Mike},
	month = nov,
	year = {2017},
	file = {Snapshot:/Users/robin/Zotero/storage/DN5739DZ/2017-11-14_learning-lambda-part-8.html:text/html},
}

@misc{noauthor_deploying_nodate,
	title = {Deploying {AWS} {Lambda} with {Docker} {Containers}: {I} {Gave} it a {Try} and {Here}'s {My} {Review} {\textbar} {Dashbird}},
	url = {https://dashbird.io/blog/deploying-aws-lambda-with-docker/?utm_content=150946872&utm_medium=social&utm_source=twitter&hss_channel=tw-840602408766046208},
	urldate = {2021-01-08},
	file = {Deploying AWS Lambda with Docker Containers\: I Gave it a Try and Here's My Review | Dashbird:/Users/robin/Zotero/storage/TMSMUKDM/deploying-aws-lambda-with-docker.html:text/html},
}

@misc{noauthor_cncfwg-serverless_nodate,
	title = {cncf/wg-serverless},
	url = {https://github.com/cncf/wg-serverless},
	abstract = {CNCF Serverless WG. Contribute to cncf/wg-serverless development by creating an account on GitHub.},
	language = {en},
	urldate = {2021-01-08},
	journal = {GitHub},
	file = {Snapshot:/Users/robin/Zotero/storage/CSV4CBY6/serverless-overview.html:text/html},
}

@misc{noauthor_defining_2017,
	title = {Defining {Serverless} — {Part} 1},
	url = {https://blog.symphonia.io/posts/2017-06-22_defining-serverless-part-1/},
	abstract = {In case you're new to my articles: Serverless Architecture is a new approach to building systems in the cloud. It incorporates Backends-as-a-Service (BaaS) — vendor-hosted, highly scalable, data and logic components to handle our needs for databases, messaging platforms, user management, and more.},
	language = {en-us},
	urldate = {2021-01-08},
	month = jun,
	year = {2017},
	file = {Snapshot:/Users/robin/Zotero/storage/HGPVUS9T/2017-06-22_defining-serverless-part-1.html:text/html;2017 - Defining Serverless — Part 1.pdf:/Users/robin/Zotero/storage/W5IMESZG/2017 - Defining Serverless — Part 1.pdf:application/pdf},
}

@misc{noauthor_economies_2021,
	title = {Economies of scale},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Economies_of_scale&oldid=997909472},
	abstract = {In microeconomics, economies of scale are the cost advantages that enterprises obtain due to their scale of operation (typically measured by the amount of output produced), with cost per unit of output decreasing with increasing scale. At the basis of economies of scale there may be technical, statistical, organizational or related factors to the degree of market control.
Economies of scale apply to a variety of organizational and business situations and at various levels, such as a production, plant or an entire enterprise. When average costs start falling as output increases, then economies of scale occur.
Some economies of scale, such as capital cost of manufacturing facilities and friction loss of transportation and industrial equipment, have a physical or engineering basis.
Another source of scale economies is the possibility of purchasing inputs at a lower per-unit cost when they are purchased in large quantities.
The economic concept dates back to Adam Smith and the idea of obtaining larger production returns through the use of division of labor. Diseconomies of scale are the opposite.
Economies of scale often have limits, such as passing the optimum design point where costs per additional unit begin to increase.  Common limits include exceeding the nearby raw material supply, such as wood in the lumber, pulp and paper industry. A common limit for a low cost per unit weight commodities is saturating the regional market, thus having to ship product uneconomic distances. Other limits include using energy less efficiently or having a higher defect rate.
Large producers are usually efficient at long runs of a product grade (a commodity) and find it costly to switch grades frequently.  They will, therefore, avoid specialty grades even though they have higher margins.  Often smaller (usually older) manufacturing facilities remain viable by changing from commodity-grade production to specialty products.Economies of scale must be distinguished from economies stemming from an increase in the production of a given plant. When a plant is used below its optimal production capacity, increases in its degree of utilization bring about decreases in the total average cost of production. As noticed, among the others, by Nicholas Georgescu-Roegen (1966) and Nicholas Kaldor (1972) these economies are not economies of scale.},
	language = {en},
	urldate = {2021-01-08},
	journal = {Wikipedia},
	month = jan,
	year = {2021},
	note = {Page Version ID: 997909472},
	file = {Snapshot:/Users/robin/Zotero/storage/W34FTW26/index.html:text/html},
}

@inproceedings{adzic_serverless_2017,
	address = {Paderborn Germany},
	title = {Serverless computing: economic and architectural impact},
	isbn = {978-1-4503-5105-8},
	shorttitle = {Serverless computing},
	url = {https://dl.acm.org/doi/10.1145/3106237.3117767},
	doi = {10.1145/3106237.3117767},
	abstract = {Amazon Web Services unveiled their ‘Lambda’ platform in late 2014. Since then, each of the major cloud computing infrastructure providers has released services supporting a similar style of deployment and operation, where rather than deploying and running monolithic services, or dedicated virtual machines, users are able to deploy individual functions, and pay only for the time that their code is actually executing. These technologies are gathered together under the marketing term ‘serverless’ and the providers suggest that they have the potential to significantly change how client/server applications are designed, developed and operated.},
	language = {en},
	urldate = {2021-01-08},
	booktitle = {Proceedings of the 2017 11th {Joint} {Meeting} on {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Adzic, Gojko and Chatley, Robert},
	month = aug,
	year = {2017},
	pages = {884--889},
	file = {Adzic und Chatley - 2017 - Serverless computing economic and architectural i.pdf:/Users/robin/Zotero/storage/WDRAWRPT/Adzic und Chatley - 2017 - Serverless computing economic and architectural i.pdf:application/pdf},
}

@misc{noauthor_sam_nodate,
	title = {Sam {Newman} - {Backends} {For} {Frontends}},
	url = {https://samnewman.io/patterns/architectural/bff/},
	urldate = {2021-01-08},
	file = {Sam Newman - Backends For Frontends:/Users/robin/Zotero/storage/QKXWAAN5/bff.html:text/html},
}

@misc{noauthor_twelve-factor_nodate,
	title = {The {Twelve}-{Factor} {App}},
	url = {https://12factor.net/},
	urldate = {2021-01-08},
	file = {The Twelve-Factor App:/Users/robin/Zotero/storage/N46CYVKC/12factor.net.html:text/html},
}

@misc{noauthor_cloudeventsspec_nodate,
	title = {cloudevents/spec},
	url = {https://github.com/cloudevents/spec},
	abstract = {CloudEvents Specification. Contribute to cloudevents/spec development by creating an account on GitHub.},
	language = {en},
	urldate = {2021-01-08},
	journal = {GitHub},
	file = {Snapshot:/Users/robin/Zotero/storage/KAADRLDF/spec.html:text/html},
}

@misc{noauthor_edge_nodate,
	title = {Edge {Computing}{\textbar} {CDN}, {Global} {Serverless} {Code}, {Distribution} {\textbar} {AWS} {Lambda}@{Edge}},
	url = {https://aws.amazon.com/de/lambda/edge/},
	abstract = {Lambda@Edge ist eine Funktion von Amazon CloudFront, mit der Sie Code global und näher bei Ihren Benutzern ausführen können, ohne Infrastruktur an mehreren Standorten auf der ganzen Welt bereitzustellen oder zu verwalten.},
	language = {de-DE},
	urldate = {2021-01-08},
	journal = {Amazon Web Services, Inc.},
}

@misc{ken_owens_cncf_2018,
	title = {{CNCF} {WG}-{Serverless} {Whitepaper} v1.0},
	url = {https://github.com/cncf/wg-serverless/blob/master/whitepapers/serverless-overview/cncf_serverless_whitepaper_v1.0.pdf},
	language = {en},
	urldate = {2021-01-08},
	author = {{Ken Owens} and {Sarah Allen} and {Ben Browning} and {Lee Calcote} and {Amir Chaudhry} and {Doug Davis} and {Louis Fourie}},
	year = {2018},
	file = {cncf_serverless_whitepaper_v1.0.pdf:/Users/robin/Zotero/storage/8ELI3XTE/cncf_serverless_whitepaper_v1.0.pdf:application/pdf},
}

@misc{noauthor_how_2017,
	title = {How {I} cut my {AWS} bill by 90\% by going serverless},
	url = {https://www.freecodecamp.org/news/how-i-cut-my-aws-bill-by-90-35c937596f0c/},
	abstract = {by Avner Sorek How I cut my AWS bill by 90\% by going serverlessIn short, I was able to move my side project — an Express.JS application — from AWS Elastic Beanstalk to Lambda+APIG. It took me less than a day and it resulted in a {\textasciitilde}90\% reduction of costs.},
	language = {en},
	urldate = {2021-01-08},
	journal = {freeCodeCamp.org},
	month = jul,
	year = {2017},
	file = {Snapshot:/Users/robin/Zotero/storage/TXFGXWFP/how-i-cut-my-aws-bill-by-90-35c937596f0c.html:text/html},
}

@misc{noauthor_tracking_2019,
	title = {Tracking the state of {AWS} {Lambda} functions},
	url = {https://aws.amazon.com/blogs/compute/tracking-the-state-of-lambda-functions/},
	abstract = {AWS Lambda functions often require resources from other AWS services in order to execute successfully, such as AWS Identity and Access Management (IAM) roles or Amazon Virtual Private Cloud (Amazon VPC) network interfaces. When you create or update a function, Lambda provisions the required resources on your behalf that enable your function to execute. In […]},
	language = {en-US},
	urldate = {2021-01-09},
	journal = {Amazon Web Services},
	month = nov,
	year = {2019},
	note = {Section: AWS Lambda},
	file = {Snapshot:/Users/robin/Zotero/storage/XV7NXQ8Z/tracking-the-state-of-lambda-functions.html:text/html},
}

@misc{noauthor_load_nodate,
	title = {Load testing for engineering teams {\textbar} k6},
	url = {https://k6.io},
	abstract = {k6 is an open-source load testing tool and cloud service providing the best developer experience for API performance testing.},
	language = {en},
	urldate = {2021-01-13},
	file = {Snapshot:/Users/robin/Zotero/storage/TRJJJ679/k6.io.html:text/html},
}

@misc{noauthor_metrics_nodate,
	title = {Metrics},
	url = {https://k6.io/docs/using-k6/metrics},
	abstract = {Docs k6 is an open source developer-centric load and performance regression testing tool for cloud native APIs, microservices and web sites/apps. Tests are written in ES6 JS with support for HTTP/1.1, HTTP/2.0 and WebSocket protocols.},
	language = {en},
	urldate = {2021-01-13},
	file = {Snapshot:/Users/robin/Zotero/storage/YUZ93RQ5/metrics.html:text/html},
}

@misc{noauthor_response_nodate,
	title = {Response},
	url = {https://k6.io/docs/javascript-api/k6-http/response},
	abstract = {Docs k6 is an open source developer-centric load and performance regression testing tool for cloud native APIs, microservices and web sites/apps. Tests are written in ES6 JS with support for HTTP/1.1, HTTP/2.0 and WebSocket protocols.},
	language = {en},
	urldate = {2021-01-13},
}

@misc{noauthor_http_nodate,
	title = {{HTTP} response status codes - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/de/docs/Web/HTTP/Status},
	urldate = {2021-01-13},
	file = {HTTP response status codes - HTTP | MDN:/Users/robin/Zotero/storage/3LW4HTQB/Status.html:text/html},
}

@misc{noauthor_introduction_nodate,
	title = {Introduction},
	url = {https://k6.io/docs/test-types/introduction},
	abstract = {Guide to test types},
	language = {en},
	urldate = {2021-01-13},
	file = {Snapshot:/Users/robin/Zotero/storage/7EI4G2EY/introduction.html:text/html},
}

@misc{noauthor_task_nodate,
	title = {Task definition parameters - {Amazon} {ECS}},
	url = {https://docs.aws.amazon.com/AmazonECS/latest/userguide/task_definition_parameters.html#standard_container_definition_params},
	urldate = {2021-01-14},
	file = {Task definition parameters - Amazon ECS:/Users/robin/Zotero/storage/GV3VPVZB/task_definition_parameters.html:text/html},
}

@misc{noauthor_amazon_nodate,
	title = {Amazon {ECS} - {User} {Guide} for {AWS} {Fargate}},
	language = {en},
	pages = {395},
	url = {https://docs.aws.amazon.com/AmazonECS/latest/userguide/ecs-ug.pdf},
	urldate = {2021-01-15},
	file = {Amazon ECS - User Guide for AWS Fargate.pdf:/Users/robin/Zotero/storage/28SNR3GW/Amazon ECS - User Guide for AWS Fargate.pdf:application/pdf},
}

@misc{noauthor_using_nodate,
	title = {Using {Amazon} {CloudWatch} {Alarms} - {Amazon} {CloudWatch}},
	url = {https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html},
	urldate = {2021-01-15},
	file = {Using Amazon CloudWatch Alarms - Amazon CloudWatch:/Users/robin/Zotero/storage/L7CSFGJN/AlarmThatSendsEmail.html:text/html},
}

@misc{noauthor_deploying_2021,
	title = {Deploying {AWS} {Lambda} with {Docker} {Containers}: {I} {Gave} it a {Try} and {Here}'s {My} {Review}},
	shorttitle = {Deploying {AWS} {Lambda} with {Docker} {Containers}},
	url = {https://dashbird.io/blog/deploying-aws-lambda-with-docker/},
	abstract = {You can now build your serverless workloads in a Docker container with AWS Lambda. We gave it a try and here's our review (with ETL examples).},
	language = {en-US},
	urldate = {2021-01-18},
	journal = {Dashbird},
	month = jan,
	year = {2021},
}

@misc{moutafis_theres_2020,
	title = {There’s an ongoing war between containers and serverless computing},
	url = {https://towardsdatascience.com/theres-an-ongoing-war-between-containers-and-serverless-computing-f2ba5379ae26},
	abstract = {But the best option might be using both at the same time},
	language = {en},
	urldate = {2021-01-18},
	journal = {Medium},
	author = {Moutafis, Rhea},
	month = aug,
	year = {2020},
	file = {Snapshot:/Users/robin/Zotero/storage/YN6UF7LP/theres-an-ongoing-war-between-containers-and-serverless-computing-f2ba5379ae26.html:text/html},
}

@inproceedings{mcgrath_serverless_2017,
	title = {Serverless {Computing}: {Design}, {Implementation}, and {Performance}},
	shorttitle = {Serverless {Computing}},
	doi = {10.1109/ICDCSW.2017.36},
	abstract = {We present the design of a novel performance-oriented serverless computing platform implemented in. NET, deployed in Microsoft Azure, and utilizing Windows containers as function execution environments. Implementation challenges such as function scaling and container discovery, lifecycle, and reuse are discussed in detail. We propose metrics to evaluate the execution performance of serverless platforms and conduct tests on our prototype as well as AWS Lambda, Azure Functions, Google Cloud Functions, and IBM's deployment of Apache OpenWhisk. Our measurements show the prototype achieving greater throughput than other platforms at most concurrency levels, and we examine the scaling and instance expiration trends in the implementations. Additionally, we discuss the gaps and limitations in our current design, propose possible solutions, and highlight future research.},
	booktitle = {2017 {IEEE} 37th {International} {Conference} on {Distributed} {Computing} {Systems} {Workshops} ({ICDCSW})},
	author = {McGrath, G. and Brenner, P. R.},
	month = jun,
	year = {2017},
	note = {ISSN: 2332-5666},
	keywords = {.NET, Apache OpenWhisk, AWS Lambda, Azure Functions, cloud computing, concurrency (computers), concurrency levels, Containers, execution performance evaluation, FaaS, function execution environments, Function-as-a-Service, Google, Google Cloud Functions, IBM OpenWhisk, IBM's deployment, Metadata, Microsoft Azure, Microsoft Windows (operating systems), performance evaluation, performance-oriented serverless computing, Prototypes, Resource management, Runtime, serverless computing, serverless performance, Web services, Windows containers},
	pages = {405--410},
	file = {IEEE Xplore Full Text PDF:/Users/robin/Zotero/storage/WEJV4F75/McGrath und Brenner - 2017 - Serverless Computing Design, Implementation, and .pdf:application/pdf;IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/2MCHTATN/7979855.html:text/html},
}

@misc{hendrickson_serverless_2017,
	title = {Serverless {Computation} with {OpenLambda}},
	url = {https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_hendrickson.pdf},
	abstract = {We present OpenLambda, a new, open-source platform for building next-generation web services and applications in the burgeoning model of serverless computation. We describe the key aspects of serverless computation, and present numerous research challenges that must be addressed in the design and implementation of such systems. We also include a brief study of current web applications, so as to better motivate some aspects of serverless application construction.},
	language = {en},
	author = {Hendrickson, Scott and Sturdevant, Stephen and Harter, Tyler and Venkataramani, Venkateshwaran and Arpaci-Dusseau, Andrea C and Arpaci-Dusseau, Remzi H},
	year = {2017},
	file = {Hendrickson et al. - Serverless Computation with OpenLambda.pdf:/Users/robin/Zotero/storage/CCUU6Y36/Hendrickson et al. - Serverless Computation with OpenLambda.pdf:application/pdf},
}

@misc{noauthor_understanding_2014,
	title = {Understanding {Container} {Reuse} in {AWS} {Lambda}},
	url = {https://aws.amazon.com/blogs/compute/container-reuse-in-lambda/},
	abstract = {Tim Wagner, AWS Lambda AWS Lambda functions execute in a container (sandbox) that isolates them from other functions and provides the resources, such as memory, specified in the function’s configuration. In this article we discuss how Lambda creates and reuses these sandboxes, and the impact of those policies on the programming model. Startup The first […]},
	language = {en-US},
	urldate = {2021-01-18},
	journal = {Amazon Web Services},
	month = dec,
	year = {2014},
	note = {Section: AWS Lambda},
	file = {Snapshot:/Users/robin/Zotero/storage/ISRPTDAK/container-reuse-in-lambda.html:text/html},
}

@misc{jonas_microservices_2016,
	title = {Microservices and {Teraflops}},
	url = {http://ericjonas.com/post/pywren1/},
	abstract = {Can AWS Lambda be used for scientific computing?},
	language = {en-us},
	urldate = {2021-01-18},
	journal = {Eric Jonas},
	author = {Jonas, Eric},
	month = oct,
	year = {2016},
	file = {Snapshot:/Users/robin/Zotero/storage/HIIB9ZZW/pywren1.html:text/html},
}

@inproceedings{villamizar_infrastructure_2016,
	title = {Infrastructure {Cost} {Comparison} of {Running} {Web} {Applications} in the {Cloud} {Using} {AWS} {Lambda} and {Monolithic} and {Microservice} {Architectures}},
	doi = {10.1109/CCGrid.2016.37},
	abstract = {Large Internet companies like Amazon, Netflix, and LinkedIn are using the microservice architecture pattern to deploy large applications in the cloud as a set of small services that can be developed, tested, deployed, scaled, operated and upgraded independently. However, aside from gaining agility, independent development, and scalability, infrastructure costs are a major concern for companies adopting this pattern. This paper presents a cost comparison of a web application developed and deployed using the same scalable scenarios with three different approaches: 1) a monolithic architecture, 2) a microservice architecture operated by the cloud customer, and 3) a microservice architecture operated by the cloud provider. Test results show that microservices can help reduce infrastructure costs in comparison to standard monolithic architectures. Moreover, the use of services specifically designed to deploy and scale microservices reduces infrastructure costs by 70\% or more. Lastly, we also describe the challenges we faced while implementing and deploying microservice applications.},
	booktitle = {2016 16th {IEEE}/{ACM} {International} {Symposium} on {Cluster}, {Cloud} and {Grid} {Computing} ({CCGrid})},
	author = {Villamizar, M. and Garcés, O. and Ochoa, L. and Castro, H. and Salamanca, L. and Verano, M. and Casallas, R. and Gil, S. and Valencia, C. and Zambrano, A. and Lang, M.},
	month = may,
	year = {2016},
	keywords = {AWS Lambda, cloud computing, Web services, Cloud computing, Computer architecture, Amazon, Amazon Web Services, AWS lambda, cloud customer, cloud provider, Companies, infrastructure cost comparison, Internet companies, LinkedIn, Logic gates, microservice architecture, microservice architecture pattern, microservices, monolithic architecture, Netflix, scalable applications, service oriented architectures, Service-oriented architecture, software architecture, software engineering, Time factors, Web applications, Web service},
	pages = {179--182},
	file = {IEEE Xplore Full Text PDF:/Users/robin/Zotero/storage/VD3GSFDT/Villamizar et al. - 2016 - Infrastructure Cost Comparison of Running Web Appl.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/QXF83IXT/7515686.html:text/html},
}

@inproceedings{van_eyk_spec_2017,
	address = {Las Vegas Nevada},
	title = {The {SPEC} cloud group's research vision on {FaaS} and serverless architectures},
	isbn = {978-1-4503-5434-9},
	url = {https://dl.acm.org/doi/10.1145/3154847.3154848},
	doi = {10.1145/3154847.3154848},
	abstract = {Cloud computing enables an entire ecosystem of developing, composing, and providing IT services. An emerging class of cloud-based software architectures, serverless, focuses on providing software architects the ability to execute arbitrary functions with small overhead in server management, as Function-as-a-service (FaaS). However useful, serverless and FaaS suffer from a community problem that faces every emerging technology, which has indeed also hampered cloud computing a decade ago: lack of clear terminology, and scattered vision about the field. In this work, we address this community problem. We clarify the term serverless, by reducing it to cloud functions as programming units, and a model of executing simple and complex (e.g., workflows of) functions with operations managed primarily by the cloud provider. We propose a research vision, where 4 key directions (perspectives) present 17 technical opportunities and challenges.},
	language = {en},
	urldate = {2021-01-18},
	booktitle = {Proceedings of the 2nd {International} {Workshop} on {Serverless} {Computing}},
	publisher = {ACM},
	author = {van Eyk, Erwin and Iosup, Alexandru and Seif, Simon and Thömmes, Markus},
	month = dec,
	year = {2017},
	pages = {1--4},
	file = {van Eyk et al. - 2017 - The SPEC cloud group's research vision on FaaS and.pdf:/Users/robin/Zotero/storage/IQ58WD9V/van Eyk et al. - 2017 - The SPEC cloud group's research vision on FaaS and.pdf:application/pdf},
}

@inproceedings{sewak_winning_2018,
	title = {Winning in the {Era} of {Serverless} {Computing} and {Function} as a {Service}},
	doi = {10.1109/I2CT.2018.8529465},
	abstract = {Serverless Computing and Function as a Service (FaaS) is gaining traction in cloud-based application architectures used by startups and matured organizations alike. Organizations that are keen to leverage modern technology to gain a disruptive edge, optimal efficiency, advanced agility and save cost are adopting these architectural styles rapidly. Cloud service provider offer and dynamically manages the allocation of machine resources in serverless computing. The serverless architectures allows the developers to focus on business logic exclusively without worrying about preparing the runtime, managing deployment and infrastructure related concerns. FaaS may be assumed as a subset of Serverless Computing, in which, instead of coding a full-fledged cloud based application, the developer just writes (often small) functions which are piece of code (in one of the multiple programming languages supported by the platform) dedicated to do a focused, often single task that are invoked by triggers. It offers dynamic allocation and scaling of the resources and innovative trigger based costing model. This paper introduces Serverless Computing, and Function as a Service (FaaS), explores its advantages and limitations, options available with popular cloud and Platform as a Service (PaaS) providers, and emerging use cases and success stories.},
	booktitle = {2018 3rd {International} {Conference} for {Convergence} in {Technology} ({I2CT})},
	author = {Sewak, M. and Singh, S.},
	month = apr,
	year = {2018},
	keywords = {cloud computing, FaaS, Google, Google Cloud Functions, serverless computing, Cloud computing, Computer architecture, Amazon AWS Lambda, Apache Open Whisk, cloud service providers, cloud-based application architectures, FAA, full-fledged cloud based application, Function as a Service, Functions as a Service(FaaS), IBM Cloud Functions, Microservices, Microsoft Azure Functions, Platform as a Service (PaaS), serverless architectures, Serverless Computing, Servers, service-oriented architecture, Task analysis},
	pages = {1--5},
	file = {IEEE Xplore Full Text PDF:/Users/robin/Zotero/storage/CTGQUH8V/Sewak und Singh - 2018 - Winning in the Era of Serverless Computing and Fun.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/TYKXZY6S/8529465.html:text/html},
}

@inproceedings{shahrad_architectural_2019,
	address = {Columbus OH USA},
	title = {Architectural {Implications} of {Function}-as-a-{Service} {Computing}},
	isbn = {978-1-4503-6938-1},
	url = {https://dl.acm.org/doi/10.1145/3352460.3358296},
	doi = {10.1145/3352460.3358296},
	abstract = {Serverless computing is a rapidly growing cloud application model, popularized by Amazon’s Lambda platform. Serverless cloud services provide fine-grained provisioning of resources, which scale automatically with user demand. Function-as-a-Service (FaaS) applications follow this serverless model, with the developer providing their application as a set of functions which are executed in response to a user- or system-generated event. Functions are designed to be short-lived and execute inside containers or virtual machines, introducing a range of system-level overheads. This paper studies the architectural implications of this emerging paradigm. Using the commercial-grade Apache OpenWhisk FaaS platform on real servers, this work investigates and identifies the architectural implications of FaaS serverless computing. The workloads, along with the way that FaaS inherently interleaves short functions from many tenants frustrates many of the locality-preserving architectural structures common in modern processors. In particular, we find that: FaaS containerization brings up to 20x slowdown compared to native execution, cold-start can be over 10x a short function’s execution time, branch mispredictions per kilo-instruction are 20x higher for short functions, memory bandwidth increases by 6x due to the invocation pattern, and IPC decreases by as much as 35\% due to inter-function interference. We open-source FaaSProfiler, the FaaS testing and profiling platform that we developed for this work.},
	language = {en},
	urldate = {2021-01-18},
	booktitle = {Proceedings of the 52nd {Annual} {IEEE}/{ACM} {International} {Symposium} on {Microarchitecture}},
	publisher = {ACM},
	author = {Shahrad, Mohammad and Balkind, Jonathan and Wentzlaff, David},
	month = oct,
	year = {2019},
	pages = {1063--1075},
	file = {Shahrad et al. - 2019 - Architectural Implications of Function-as-a-Servic.pdf:/Users/robin/Zotero/storage/AUGR4PTJ/Shahrad et al. - 2019 - Architectural Implications of Function-as-a-Servic.pdf:application/pdf},
}

@article{scheuner_function-as--service_2020,
	title = {Function-as-a-{Service} performance evaluation: {A} multivocal literature review},
	volume = {170},
	issn = {01641212},
	shorttitle = {Function-as-a-{Service} performance evaluation},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121220301527},
	doi = {10.1016/j.jss.2020.110708},
	abstract = {Function-as-a-Service (FaaS) is one form of the serverless cloud computing paradigm and is defined through FaaS platforms (e.g., AWS Lambda) executing event-triggered code snippets (i.e., functions). Many studies that empirically evaluate the performance of such FaaS platforms have started to appear but we are currently lacking a comprehensive understanding of the overall domain. To address this gap, we conducted a multivocal literature review (MLR) covering 112 studies from academic (51) and grey (61) literature. We find that existing work mainly studies the AWS Lambda platform and focuses on micro-benchmarks using simple functions to measure CPU speed and FaaS platform overhead (i.e., container cold starts). Further, we discover a mismatch between academic and industrial sources on tested platform configurations, find that function triggers remain insufficiently studied, and identify HTTP API gateways and cloud storages as the most used external service integrations. Following existing guidelines on experimentation in cloud systems, we discover many flaws threatening the reproducibility of experiments presented in the surveyed studies. We conclude with a discussion of gaps in literature and highlight methodological suggestions that may serve to improve future FaaS performance evaluation studies.},
	language = {en},
	urldate = {2021-01-18},
	journal = {Journal of Systems and Software},
	author = {Scheuner, Joel and Leitner, Philipp},
	month = dec,
	year = {2020},
	pages = {110708},
	file = {Scheuner und Leitner - 2020 - Function-as-a-Service performance evaluation A mu.pdf:/Users/robin/Zotero/storage/9AV639MH/Scheuner und Leitner - 2020 - Function-as-a-Service performance evaluation A mu.pdf:application/pdf},
}

@misc{archiveddocs_performance_nodate,
	title = {Performance {Testing} {Guidance} for {Web} {Applications}},
	url = {https://docs.microsoft.com/en-us/previous-versions/msp-n-p/bb924375(v=pandp.10)},
	language = {en-us},
	urldate = {2021-01-20},
	author = {Archiveddocs},
	file = {Snapshot:/Users/robin/Zotero/storage/ZN6HQYWP/bb924375(v=pandp.html:text/html},
}

@misc{noauthor_software_2021,
	title = {Software performance testing},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Software_performance_testing&oldid=1000477195},
	abstract = {In software quality assurance, performance testing is in general a testing practice performed to determine how a system performs in terms of responsiveness and stability under a particular workload. It can also serve to investigate, measure, validate or verify other quality attributes of the system, such as scalability, reliability and resource usage.
Performance testing, a subset of performance engineering, is a computer science practice which strives to build performance standards into the implementation, design and architecture of a system.},
	language = {en},
	urldate = {2021-01-20},
	journal = {Wikipedia},
	month = jan,
	year = {2021},
	note = {Page Version ID: 1000477195},
	file = {Snapshot:/Users/robin/Zotero/storage/45FC76B7/index.html:text/html},
}

@misc{gherorghiu_agile_2005,
	title = {Agile {Testing}: {Performance} vs. load vs. stress testing},
	shorttitle = {Agile {Testing}},
	url = {http://agiletesting.blogspot.com/2005/02/performance-vs-load-vs-stress-testing.html},
	language = {en},
	urldate = {2021-01-20},
	journal = {Agile Testing},
	author = {Gherorghiu, Grig},
	month = feb,
	year = {2005},
	file = {Blogspot Snapshot:/Users/robin/Zotero/storage/YA8FFJ4K/performance-vs-load-vs-stress-testing.html:text/html},
}

@misc{noauthor_stress_2021,
	title = {Stress testing (software)},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Stress_testing_(software)&oldid=1000101442},
	abstract = {Stress testing is a software testing activity that determines the robustness of software by testing beyond the limits of normal operation. Stress testing is particularly important for "mission critical" software, but is used for all types of software. Stress tests commonly put a greater emphasis on robustness, availability, and error handling under a heavy load, than on what would be considered correct behavior under normal circumstances.},
	language = {en},
	urldate = {2021-01-20},
	journal = {Wikipedia},
	month = jan,
	year = {2021},
	note = {Page Version ID: 1000101442},
	file = {Snapshot:/Users/robin/Zotero/storage/IYBDWU8V/index.html:text/html},
}

@book{molyneaux_art_2014,
	edition = {2},
	title = {The {Art} of {Application} {Performance} {Testing}, 2nd {Edition}},
	isbn = {978-1-4919-0054-3},
	url = {https://learning.oreilly.com/library/view/the-art-of/9781491900536/},
	abstract = {Because performance is paramount today, this thoroughly updated guide shows you how to test mission-critical applications for scalability and performance before you deploy them—whether it’s to the cloud or a mobile device. You’ll learn the complete testing process lifecycle step-by-step, along with best practices to plan, coordinate, and conduct performance tests on your applications.},
	language = {en},
	urldate = {2021-01-20},
	publisher = {O'Reilly Media, Inc.},
	author = {Molyneaux, Ian},
	month = dec,
	year = {2014},
}

@misc{noauthor_running_nodate,
	title = {Running large tests},
	url = {https://k6.io/docs/testing-guides/running-large-tests},
	abstract = {How to run large-scale k6 tests without distributed-execution},
	language = {en},
	urldate = {2021-01-21},
	file = {Snapshot:/Users/robin/Zotero/storage/DWSMDBJQ/running-large-tests.html:text/html},
}

@misc{noauthor_amazon_nodate-1,
	title = {Amazon {EC2} {Instance}-{Typen} – {Amazon} {Web} {Services} ({AWS})},
	url = {https://aws.amazon.com/de/ec2/instance-types/},
	abstract = {AWS EC2 bietet eine breite Palette an Instance-Typen, die es Ihnen ermöglichen, Ihre Cloud-Ressourcen gemäß Ihrer Ziel-Workloads zu skalieren. Erfahren Sie, welche Instance-Typen (Instance Types) Sie mit Amazon EC2 je nach Anwendung von T2 Instances bis zu M5 anwenden können.},
	language = {de-DE},
	urldate = {2021-01-21},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/robin/Zotero/storage/IBKCJD9C/instance-types.html:text/html},
}

@misc{datadog_11_0000,
	title = {11 facts about real world container use},
	url = {https://www.datadoghq.com/container-report/},
	abstract = {Building on our yearly reports on how our customers are using containers, we are pleased to share our latest research into the use of containers and orchestration technologies like Kubernetes and Amazon ECS.},
	language = {en},
	urldate = {2021-01-21},
	journal = {11 facts about real world container use},
	author = {Datadog},
	year = {0000},
	file = {Snapshot:/Users/robin/Zotero/storage/C3DXL5UF/container-report.html:text/html},
}

@article{papadopoulos_methodological_2019,
	title = {Methodological {Principles} for {Reproducible} {Performance} {Evaluation} in {Cloud} {Computing}},
	issn = {1939-3520},
	doi = {10.1109/TSE.2019.2927908},
	abstract = {The rapid adoption and the diversification of cloud computing technology exacerbate the importance of a sound experimental methodology for this domain. This work investigates how to measure and report performance in the cloud, and how well the cloud research community is already doing it. We propose a set of eight important methodological principles that combine best-practices from nearby fields with concepts applicable only to clouds, and with new ideas about the time-accuracy trade-off. We show how these principles are applicable using a practical use-case experiment. To this end, we analyze the ability of the newly released SPEC Cloud IaaS benchmark to follow the principles, and showcase real-world experimental studies in common cloud environments that meet the principles. Last, we report on a systematic literature review including top conferences and journals in the field, from 2012 to 2017, analyzing if the practice of reporting cloud performance measurements follows the proposed eight principles. Worryingly, this systematic survey and the subsequent two-round human reviews, reveal that few of the published studies follow the eight experimental principles. We conclude that, although these important principles are simple and basic, the cloud community is yet to adopt them broadly to deliver sound measurement of cloud environments.},
	journal = {IEEE Transactions on Software Engineering},
	author = {Papadopoulos, Alessandro V. and Versluis, Laurens and Bauer, André and Herbst, Nikolas and von Kistowski, Jóakim and Ali-eldin, Ahmed and Abad, Christina L. and Amaral, José N. and Tůma, Petr and Iosup, Alexandru},
	year = {2019},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	keywords = {Cloud computing, Benchmark testing, Computer performance, Experimental evaluation, experimentation, observation study, Performance evaluation, Software engineering, Systematics},
	pages = {1--1},
	file = {IEEE Xplore Full Text PDF:/Users/robin/Zotero/storage/UXNRU9BZ/Papadopoulos et al. - 2019 - Methodological Principles for Reproducible Perform.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/XYTP7JYZ/8758926.html:text/html},
}

@misc{noauthor_increasingcpuloadlvl1_nodate,
	title = {{IncreasingCPULoadLvl1} - {Faastest} - {Benchmark} {FaaS} {Providers} {Powered} by {Nuweba}},
	url = {https://www.faastest.com/},
	abstract = {Daily Tests from serverless provider for speed and performance},
	urldate = {2021-01-22},
	file = {Snapshot:/Users/robin/Zotero/storage/74HVGUL9/www.faastest.com.html:text/html},
}

@article{figiela_performance_2018,
	title = {Performance evaluation of heterogeneous cloud functions},
	volume = {30},
	issn = {1532-0634},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.4792},
	doi = {https://doi.org/10.1002/cpe.4792},
	abstract = {Cloud Functions, often called Function-as-a-Service (FaaS), pioneered by AWS Lambda, are an increasingly popular method of running distributed applications. As in other cloud offerings, cloud functions are heterogeneous due to variations in underlying hardware, runtime systems, as well as resource management and billing models. In this paper, we focus on performance evaluation of cloud functions, taking into account heterogeneity aspects. We developed a cloud function benchmarking framework, consisting of one suite based on Serverless Framework and one based on HyperFlow. We deployed the CPU-intensive benchmarks: Mersenne Twister and Linpack. We measured the data transfer times between cloud functions and storage, and we measured the lifetime of the runtime environment. We evaluated all the major cloud function providers: AWS Lambda, Azure Functions, Google Cloud Functions, and IBM Cloud Functions. We made our results available online and continuously updated. We report on the results of the performance evaluation, and we discuss the discovered insights into resource allocation policies.},
	language = {en},
	number = {23},
	urldate = {2021-01-22},
	journal = {Concurrency and Computation: Practice and Experience},
	author = {Figiela, Kamil and Gajek, Adam and Zima, Adam and Obrok, Beata and Malawski, Maciej},
	year = {2018},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.4792},
	keywords = {cloud computing, FaaS, performance evaluation, serverless, cloud functions},
	pages = {e4792},
	annote = {e4792 cpe.4792},
	file = {Snapshot:/Users/robin/Zotero/storage/JBAKJJBK/cpe.html:text/html;Full Text PDF:/Users/robin/Zotero/storage/Q9CD7LJR/Figiela et al. - 2018 - Performance evaluation of heterogeneous cloud func.pdf:application/pdf},
}

@misc{debrie_aws_2019,
	title = {{AWS} {API} {Performance} {Comparison}: {Serverless} vs. {Containers} vs. {API} {Gateway} integration},
	shorttitle = {{AWS} {API} {Performance} {Comparison}},
	url = {https://alexdebrie.com/posts/aws-api-performance-comparison/},
	abstract = {A performance comparison between three different methods of deploying an API on AWS},
	language = {en},
	urldate = {2021-01-22},
	author = {DeBrie, Alex},
	month = feb,
	year = {2019},
	file = {Snapshot:/Users/robin/Zotero/storage/QEHUPNDX/aws-api-performance-comparison.html:text/html},
}

@inproceedings{manner_cold_2018,
	title = {Cold {Start} {Influencing} {Factors} in {Function} as a {Service}},
	doi = {10.1109/UCC-Companion.2018.00054},
	abstract = {Function as a Service (FaaS) is a young and rapidly evolving cloud paradigm. Due to its hardware abstraction, inherent virtualization problems come into play and need an assessment from the FaaS point of view. Especially avoidance of idling and scaling on demand cause a lot of container starts and as a consequence a lot of cold starts for FaaS users. The aim of this paper is to address the cold start problem in a benchmark and investigate influential factors on the duration of the perceived cold start. We conducted a benchmark on AWS Lambda and Microsoft Azure Functions with 49500 cloud function executions. Formulated as hypotheses, the influence of the chosen programming language, platform, memory size for the cloud function, and size of the deployed artifact are the dimensions of our benchmark. Cold starts on the platform as well as the cold starts for users were measured and compared to each other. Our results show that there is an enormous difference for the overhead the user perceives compared to the billed duration. In our benchmark, the average cold start overheads on the user's side ranged from 300ms to 24s for the chosen configurations.},
	booktitle = {2018 {IEEE}/{ACM} {International} {Conference} on {Utility} and {Cloud} {Computing} {Companion} ({UCC} {Companion})},
	author = {Manner, J. and Endreß, M. and Heckel, T. and Wirtz, G.},
	month = dec,
	year = {2018},
	keywords = {AWS Lambda, cloud computing, Containers, Cloud computing, FAA, Function as a Service, Microsoft Azure Functions, Benchmark testing, cloud function executions, cold start problem, container starts, Java, Pipelines, Serverless Computing, Function as a Service, FaaS, Cloud Functions, Cold Start, Benchmarking, virtualisation, virtualization problems},
	pages = {181--188},
	file = {IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/GW22Z4L3/8605777.html:text/html},
}

@article{hoste_microarchitecture-independent_2007,
	title = {Microarchitecture-{Independent} {Workload} {Characterization}},
	volume = {27},
	issn = {1937-4143},
	doi = {10.1109/MM.2007.56},
	abstract = {For computer designers, understanding the characteristics of workloads running on current and future computer systems is of utmost importance during microprocessor design a microarchitecture-independent method ensures an accurate characterization of inherent program behavior and avoids the weaknesses of microarchitecture-dependent metrics.},
	number = {3},
	journal = {IEEE Micro},
	author = {Hoste, Kenneth and Eeckhout, Lieven},
	month = may,
	year = {2007},
	note = {Conference Name: IEEE Micro},
	keywords = {Application software, Biometrics, Computational modeling, computer architecture, computer designers, computer systems, Counting circuits, Design optimization, Hardware, measurement techniques, Microarchitecture, microarchitecture-independent workload characterization, microprocessor design, Microprocessors, microprogramming, modeling techniques, Performance analysis, performance attributes, Solids, workload characterization},
	pages = {63--72},
	file = {IEEE Xplore Full Text PDF:/Users/robin/Zotero/storage/AI6IPIHZ/Hoste und Eeckhout - 2007 - Microarchitecture-Independent Workload Characteriz.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/CJ7LZAFC/4292057.html:text/html},
}

@article{ajay_joshi_measuring_2006,
	title = {Measuring benchmark similarity using inherent program characteristics},
	volume = {55},
	issn = {1557-9956},
	doi = {10.1109/TC.2006.85},
	abstract = {This paper proposes a methodology for measuring the similarity between programs based on their inherent microarchitecture-independent characteristics, and demonstrates two applications for it: 1) finding a representative subset of programs from benchmark suites and 2) studying the evolution of four generations of SPEC CPU benchmark suites. Using the proposed methodology, we find a representative subset of programs from three popular benchmark suites - SPEC CPU2000, MediaBench, and MiBench. We show that this subset of representative programs can be effectively used to estimate the average benchmark suite IPC, L1 data cache miss-rates, and speedup on 11 machines with different ISAs and microarchitectures - this enables one to save simulation time with little loss in accuracy. From our study of the similarity between the four generations of SPEC CPU benchmark suites, we find that, other than a dramatic increase in the dynamic instruction count and increasingly poor temporal data locality, the inherent program characteristics have more or less remained unchanged},
	number = {6},
	journal = {IEEE Transactions on Computers},
	author = {{Ajay Joshi} and {Aashish Phansalkar} and Eeckhout, Lieven and John, Lizy K.},
	month = jun,
	year = {2006},
	note = {Conference Name: IEEE Transactions on Computers},
	keywords = {modeling techniques, benchmark similarity measurement, benchmark testing, inherent microarchitecture-independent characteristics, inherent program characteristics, IPC, L1 data cache miss-rates, Measurement techniques, MediaBench, MiBench, performance attributes., performance of systems, Software performance, software performance evaluation, SPEC CPU benchmark suites},
	pages = {769--782},
	file = {IEEE Xplore Full Text PDF:/Users/robin/Zotero/storage/CI79M7V6/Ajay Joshi et al. - 2006 - Measuring benchmark similarity using inherent prog.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/DJBUYLAG/1628963.html:text/html},
}

@incollection{jeffay_using_2003,
	address = {Berlin, Heidelberg},
	title = {Using {Latency} {Quantiles} to {Engineer} {QoS} {Guarantees} for {Web} {Services}},
	volume = {2707},
	isbn = {978-3-540-40281-7 978-3-540-44884-6},
	url = {http://link.springer.com/10.1007/3-540-44884-5_19},
	language = {en},
	urldate = {2021-01-23},
	booktitle = {Quality of {Service} — {IWQoS} 2003},
	publisher = {Springer Berlin Heidelberg},
	author = {Fiedler, Ulrich and Plattner, Bernhard},
	editor = {Jeffay, Kevin and Stoica, Ion and Wehrle, Klaus},
	year = {2003},
	doi = {10.1007/3-540-44884-5_19},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {345--362},
	file = {Fiedler und Plattner - 2003 - Using Latency Quantiles to Engineer QoS Guarantees.pdf:/Users/robin/Zotero/storage/942FVU9P/Fiedler und Plattner - 2003 - Using Latency Quantiles to Engineer QoS Guarantees.pdf:application/pdf},
}

@misc{noauthor_wie_nodate,
	title = {Wie ist die {Statistik} zu interpretieren?},
	url = {https://www.rtr.at/TKP/service/rtr-nettest/help/test_result/netztestfaq_testergebnis_1100.de.html},
	language = {de},
	urldate = {2021-01-23},
	journal = {RTR},
	file = {Snapshot:/Users/robin/Zotero/storage/G9MTMTUU/netztestfaq_testergebnis_1100.de.html:text/html},
}

@misc{noauthor_data_nodate,
	title = {data visualization - {How} to read a value-quantile diagram?},
	url = {https://stats.stackexchange.com/questions/64796/how-to-read-a-value-quantile-diagram},
	urldate = {2021-01-23},
	journal = {Cross Validated},
	file = {Snapshot:/Users/robin/Zotero/storage/3DA6SBKG/how-to-read-a-value-quantile-diagram.html:text/html},
}

@misc{noauthor_verteilungsfunktion_2020,
	title = {Verteilungsfunktion},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://de.wikipedia.org/w/index.php?title=Verteilungsfunktion&oldid=201484998},
	abstract = {Die Verteilungsfunktion ist eine spezielle reelle Funktion in der Stochastik und ein zentrales Konzept bei der Untersuchung von Wahrscheinlichkeitsverteilungen auf den reellen Zahlen. Jeder Wahrscheinlichkeitsverteilung und jeder reellwertigen Zufallsvariable kann eine Verteilungsfunktion zugeordnet werden. Anschaulich entspricht dabei der Wert der Verteilungsfunktion an der Stelle 
  
    
      
        x
      
    
    \{{\textbackslash}displaystyle x\}
   der Wahrscheinlichkeit, dass die zugehörige Zufallsvariable 
  
    
      
        X
      
    
    \{{\textbackslash}displaystyle X\}
   einen Wert kleiner oder gleich 
  
    
      
        x
      
    
    \{{\textbackslash}displaystyle x\}
   annimmt. Ist beispielsweise die Verteilung der Schuhgrößen in Europa gegeben, so entspricht der Wert der entsprechenden Verteilungsfunktion bei 45 der Wahrscheinlichkeit, dass ein beliebiger Europäer die Schuhgröße 45 oder kleiner besitzt.
Ihre Bedeutung erhält die Verteilungsfunktion durch den Korrespondenzsatz, der besagt, dass jeder Verteilungsfunktion eine Wahrscheinlichkeitsverteilung auf den reellen Zahlen zugeordnet werden kann und umgekehrt. Die Zuordnung ist bijektiv. Dies ermöglicht es, anstelle der Untersuchung von Wahrscheinlichkeitsverteilungen als Mengenfunktionen auf einem komplexen Mengensystem mit Methoden der Maßtheorie die entsprechenden Verteilungsfunktionen zu untersuchen. Diese sind reelle Funktionen und somit über die Methoden der reellen Analysis leichter zugänglich.
Als alternative Bezeichnungen finden sich unter anderem kumulierte Verteilungsfunktion, da sie die Wahrscheinlichkeiten kleiner als 
  
    
      
        x
      
    
    \{{\textbackslash}displaystyle x\}
   zu sein anhäuft, siehe auch kumulierte Häufigkeit. Des Weiteren wird sie zur besseren Abgrenzung von ihrem höherdimensionalen Pendant, der multivariaten Verteilungsfunktion, auch als univariate Verteilungsfunktion bezeichnet. In Abgrenzung zum allgemeineren Maßtheoretischen Konzept einer Verteilungsfunktion finden sich die Bezeichnungen als wahrscheinlichkeitstheoretische Verteilungsfunktion oder als Verteilungsfunktion im engeren Sinn.Die Entsprechung der Verteilungsfunktion in der deskriptiven Statistik ist die empirische Verteilungs- oder Summenhäufigkeitsfunktion.},
	language = {de},
	urldate = {2021-01-23},
	journal = {Wikipedia},
	month = jul,
	year = {2020},
	note = {Page Version ID: 201484998},
	file = {Snapshot:/Users/robin/Zotero/storage/3JSS8KDU/index.html:text/html},
}

@misc{noauthor_quantil_2020,
	title = {Quantil ({Wahrscheinlichkeitstheorie})},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://de.wikipedia.org/w/index.php?title=Quantil_(Wahrscheinlichkeitstheorie)&oldid=205302404},
	abstract = {Ein Quantil ist ein Lagemaß in der Statistik. Anschaulich ist ein Quantil ein Schwellenwert: ein bestimmter Anteil der Werte ist kleiner als das Quantil, der Rest ist größer. Das 25-\%-Quantil beispielsweise ist der Wert, für den gilt, dass 25 \% aller Werte kleiner sind als dieser Wert. Quantile formalisieren praktische Aussagen wie „25 \% aller Frauen sind kleiner als 1,62 m“ – wobei 1,62 m hier das 25-\%-Quantil ist.
Eine bekannte Darstellung und Veranschaulichung einer Quantilfunktion aus der Ökonometrie ist die Parade der Einkommen (Pen’s Parade) des Ökonomen Jan Pen zur Einkommensverteilung.
Genauer ist das 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
  -Quantil, wobei 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   eine reelle Zahl zwischen 0 und 1 ist, ein Wert einer Variablen oder Zufallsvariablen, der die Menge aller Merkmalswerte (salopp „die Verteilung“) in zwei Abschnitte unterteilt: Links vom 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
  -Quantil liegt der Anteil 
  
    
      
        p
         
        (
        =
        100
        p
        
        \%
        )
      
    
    \{{\textbackslash}displaystyle p{\textbackslash} (=100p{\textbackslash},{\textbackslash}\%)\}
   aller Beobachtungswerte oder der Gesamtzahl der Zufallswerte oder der Fläche unter der Dichtekurve; rechts davon liegt der jeweilige restliche Anteil 
  
    
      
        1
        −
        p
         
        (
        =
        100
        (
        1
        −
        p
        )
        
        \%
        )
      
    
    \{{\textbackslash}displaystyle 1-p{\textbackslash} (=100(1-p){\textbackslash},{\textbackslash}\%)\}
  . Die Zahl 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   heißt auch der Unterschreitungsanteil.
Spezielle Quantile sind der Median, die Quartile, die Quintile, die Dezile und die Perzentile.
Als Quantil der Ordnung 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   oder 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
  -Quantil 
  
    
      
        Q
        (
        p
        )
      
    
    \{{\textbackslash}displaystyle Q(p)\}
   (veraltet auch „Fraktil“) wird in der Statistik ein Merkmalswert bezeichnet, unterhalb dessen ein vorgegebener Anteil 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   aller Fälle der Verteilung liegt. Jeder Wert unterhalb von 
  
    
      
        Q
        (
        p
        )
      
    
    \{{\textbackslash}displaystyle Q(p)\}
   unterschreitet diesen vorgegebenen Anteil. Dabei kann der Unterschreitungsanteil 
  
    
      
        p
      
    
    \{{\textbackslash}displaystyle p\}
   auch als eine reelle Zahl zwischen 0 (gar kein Fall der Verteilung) und 1 (alle Fälle bzw. 100 \% der Verteilung) angegeben werden.},
	language = {de},
	urldate = {2021-01-23},
	journal = {Wikipedia},
	month = nov,
	year = {2020},
	note = {Page Version ID: 205302404},
	file = {Snapshot:/Users/robin/Zotero/storage/QWDKS9DA/index.html:text/html},
}

@misc{noauthor_varianz_2021,
	title = {Varianz ({Stochastik})},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://de.wikipedia.org/w/index.php?title=Varianz_(Stochastik)&oldid=207244046},
	abstract = {Die Varianz (lateinisch variantia „Verschiedenheit“ bzw. variare „(ver)ändern, verschieden sein“) ist ein Maß für die Streuung der Wahrscheinlichkeitsdichte um ihren Schwerpunkt. Mathematisch wird sie definiert als die mittlere quadratische Abweichung einer reellen Zufallsvariablen von ihrem Erwartungswert. Sie ist das zentrale Moment zweiter Ordnung einer Zufallsvariablen.
Die Varianz kann physikalisch als Trägheitsmoment interpretiert und mit einem Varianzschätzer, z. B. der Stichprobenvarianz, bestimmt werden. Die Quadratwurzel  der Varianz ist das als Standardabweichung bezeichnete wichtigste Streuungsmaß in der Stochastik.
Die Bezeichnung „Varianz“ wurde vor allem von dem britischen Statistiker Ronald Fisher (1890–1962) geprägt. Weitere Wörter für die Varianz sind das veraltete Dispersion (lateinisch dispersio „Zerstreuung“ bzw. dispergere „verteilen, ausbreiten, zerstreuen“), das Streuungsquadrat oder die Streuung.
Zu den Eigenschaften der Varianz gehören, dass sie niemals negativ ist und sich bei Verschiebung der Verteilung nicht ändert. Die Varianz einer Summe unkorrelierter Zufallsvariablen ist gleich der Summe ihrer Varianzen. Ein Nachteil der Varianz für praktische Anwendungen ist, dass sie im Unterschied zur Standardabweichung eine andere Einheit als die Zufallsvariable besitzt. Da sie über ein Integral definiert wird, existiert sie nicht für alle Verteilungen, d. h., sie kann auch unendlich sein.
Eine Verallgemeinerung der Varianz ist die Kovarianz. Im Unterschied zur Varianz, die die Variabilität der betrachteten Zufallsvariable misst, ist die Kovarianz ein Maß für die gemeinsame Variabilität von zwei Zufallsvariablen. Aus dieser Definition der Kovarianz folgt, dass die Kovarianz einer Zufallsvariable mit sich selbst gleich der Varianz dieser Zufallsvariablen ist. Im Falle eines reellen Zufallsvektors kann die Varianz zur Varianz-Kovarianzmatrix verallgemeinert werden.},
	language = {de},
	urldate = {2021-01-23},
	journal = {Wikipedia},
	month = jan,
	year = {2021},
	note = {Page Version ID: 207244046},
}

@article{martins_benchmarking_nodate,
	title = {Benchmarking {Serverless} {Computing} {Platforms}},
	language = {en},
	author = {Martins, Horácio and Araujo, Filipe and Rupino da Cunha, Paulo},
	pages = {19},
	file = {Martins - Benchmarking Serverless Computing Platforms.pdf:/Users/robin/Zotero/storage/R9PR2QPY/Martins - Benchmarking Serverless Computing Platforms.pdf:application/pdf},
}

@techreport{eismann_review_2020,
	title = {A {Review} of {Serverless} {Use} {Cases} and their {Characteristics}},
	url = {https://research.spec.org/fileadmin/user_upload/documents/rg_cloud/endorsed_publications/SPEC_RG_2020_Serverless_Usecases.pdf},
	abstract = {The serverless computing paradigm promises many desirable properties for cloud applications—
low-cost, fine-grained deployment, and management-free operation. Consequently, the paradigm
has underwent rapid growth: there currently exist tens of serverless platforms and all global cloud
providers host serverless operations. To help tune existing platforms, guide the design of new
serverless approaches, and overall contribute to understanding this paradigm, in this work we
present a long-term, comprehensive effort to identify, collect, and characterize serverless use
cases. We survey 89 use cases, sourced from white and grey literature, and from consultations
with experts in areas such as scientific computing. We study each use case using 24 characteristics, including general aspects, but also workload, application, and requirements. When the
use cases employ workflows, we further analyze their characteristics. Overall, we hope our study
will be useful for both academia and industry, and encourage the community to further share
and communicate their use cases.},
	language = {en},
	number = {SPEC-RG-2020-8},
	urldate = {2021-01-25},
	institution = {SPEC},
	author = {Eismann, Simon and Scheuner, Joel and van Eyk, Erwin and Schwinger, Maximilian and Grohmann, Johannes and Herbst, Nikolas and Abad, Christina L. and Iosup, Alexandru},
	month = aug,
	year = {2020},
	pages = {47},
	file = {SPEC_RG_2020_Serverless_Usecases.pdf:/Users/robin/Zotero/storage/XPRR6E3N/SPEC_RG_2020_Serverless_Usecases.pdf:application/pdf},
}

@misc{noauthor_incloud_nodate,
	title = {{INCLOUD} {Abschlussarbeit}},
	url = {https://incloudde-my.sharepoint.com/personal/robin_luley_incloud_de/Documents/Microsoft%20Teams-Chatdateien/ServerlessvsContainer.pdf},
	language = {de},
	urldate = {2021-01-25},
	file = {ServerlessvsContainer.pdf:/Users/robin/Zotero/storage/GZEIGDM7/ServerlessvsContainer.pdf:application/pdf},
}

@misc{noauthor_pandas_nodate,
	title = {pandas - {Python} {Data} {Analysis} {Library}},
	url = {https://pandas.pydata.org/},
	urldate = {2021-01-25},
	file = {pandas - Python Data Analysis Library:/Users/robin/Zotero/storage/ZGFVYS5F/pandas.pydata.org.html:text/html},
}

@article{perez_serverless_nodate,
	title = {Serverless {Computing} for {Container}-based {Architectures}},
	abstract = {New architectural patterns (e.g. microservices), the massive adoption of Linux containers (e.g. Docker containers), and improvements in key features of Cloud computing such as auto-scaling, have helped developers to decouple complex and monolithic systems into smaller stateless services. In turn, Cloud providers have introduced serverless computing, where applications can be deﬁned as a workﬂow of event-triggered functions. However, serverless services, such as AWS Lambda, impose serious restrictions for these applications (e.g. using a predeﬁned set of programming languages or diﬃculting the installation and deployment of external libraries). This paper addresses such issues by introducing a framework and a methodology to create Serverless Container-aware ARchitectures (SCAR). The SCAR framework can be used to create highly-parallel eventdriven serverless applications that run on customized runtime environments deﬁned as Docker images on top of AWS Lambda. This paper describes the architecture of SCAR together with the cache-based optimizations applied to minimize cost, exempliﬁed on a massive image processing use case. The results show that, by means of SCAR, AWS Lambda becomes a convenient platform for High Throughput Computing, specially for highly-parallel bursty workloads of short stateless jobs.},
	language = {en},
	author = {Perez, Alfonso and Molto, German and Caballer, Miguel and Calatrava, Amanda},
	pages = {19},
	file = {Perez et al. - Serverless Computing for Container-based Architect.pdf:/Users/robin/Zotero/storage/UQLMHQ4Z/Perez et al. - Serverless Computing for Container-based Architect.pdf:application/pdf},
}

@article{jain_performance_2020,
	title = {Performance {Analysis} of {Various} {Server} {Hosting} {Techniques}},
	volume = {173},
	issn = {18770509},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S187705092031512X},
	doi = {10.1016/j.procs.2020.06.010},
	abstract = {CAlbosutdraCctomputing is growing exponentially and provides various server hosting services like Virtual Machines, Docker containers and Serverless Architectures. The traditional Virtual Machines (VMs) have long-running power with computation power that aCplpoeuadrsCoonmrpeuqtuinegstiasngdrovwaninisgheexspaoftneernutisael,lyriagnhdt apwroavyi.dCesonvtaariinoeurss saerrevcerrehaotesdtinogn stoerpvoicfeasnliokpeeVraitritnugalsMysatecmhinuessi,ngDodcokcekrerc;ownthaiicnhaelrssoanaudtoSmeravteersletshseAdrecphloityemctuenretso. fTahpeptlriacdatiitoionnsaol nVitrhteumal. MSearcvheirnleesss(VapMplsi)cahtaiovnesloanreg-ervuennnti-ndgripveonwecrlowudit-hbacsoemdpsuytsatteiomnspwohweerretdhea-t vapelpoepamrseonnt orefqaupepslticaantdionvadneispheensdsafcteormupslee,terliyghotnawcoamy.bCinoinngtaitnheercslaiernetcsriedaet’esdloognicto, p3rodf paanrtoiepse’rasteirnvgicseysstaenmd culsoinugd-dhoocskteedr;rwemhiocthe palrsooceaduutoremcaatellss.thTehedeSpelrovyemrleensst Cofonaptapilniecratiinotnesgroantetshdeomc.kSerercvoenrtlaeisnsearps pwliicthatsioenrvsearlreesesvaepnptl-idcraivtieonnsc.loAumd-abzaosnedWseybstSeemrvsicwehse(AreWdSe)oveﬀleorpsmEeCnSt owfitahpFpalircgaattieonwdheicphenhdosstcsodmocpkleetreclyonotnaicnoemrsbaisnsinergvethrleescsliaepnpt lsiicdaet’isonlos.gSice,rv3erdrlepsasrtCieosn’taseinrveric-aews aarnedAcRlocuhdi-tehcotsutreed(SreCmAoRte) fprraomceedwuorrekc[1al]lsp.rTovhiedeSsertvheerlseasms eCfounntacitnioenrailnittyegoraf theossdtioncgkedroccoknetracinoenrtsaiwneitrhs soevrevrerAleWssSaLppamlicbadtiao.nOs.uAr wmoarzkonfoWcuesbesSeornvitchees(pAeWrfoSr)moﬀaenrcseEaCnSalwysitihs Foafrvgaartieowushiccohmhpousttse dsoecrvkiecrecsomnteanintieornseads saebrovveerl.eBssaaspedpliocnattihoensr.eSseurlvtserwleesshCavoentaalisnoero-aﬀweraerde AreRcochmitmecetnudraet(iSoCnsARon) pfriacmkienwgofrrko[m1]vparroiovuidsessertvheershaomsetinfguntcetcihonniaqluiteys.of hosting docker containers over AWS Lambda. Our work focuses on the performance analysis of various compute services mentioned above. Based on the results we have also oﬀered recommendations on pcic2k0in2g0 fTrohme Avuarthioourss.sPeurvbelrishhoesdtibnygEtelcsehvniieqruBes.V. .},
	language = {en},
	urldate = {2021-02-01},
	journal = {Procedia Computer Science},
	author = {Jain, Prerna and Munjal, Yogesh and Gera, Jatin and Gupta, Pooja},
	year = {2020},
	pages = {70--77},
	file = {Jain et al. - 2020 - Performance Analysis of Various Server Hosting Tec.pdf:/Users/robin/Zotero/storage/R42GVADS/Jain et al. - 2020 - Performance Analysis of Various Server Hosting Tec.pdf:application/pdf},
}

@inproceedings{gilani_application_2015,
	title = {Application and network performance of {Amazon} elastic compute cloud instances},
	doi = {10.1109/CloudNet.2015.7335328},
	abstract = {The computing and networking infrastructure in public clouds is shared between multiple users and can create abnormal variations in the performance of applications running in cloud. In this paper we compare the performance of compute-intensive applications on CPUs and GPUs offered by Amazon's cloud and show that not all applications exhibit speedups when executed on the GPU. Even for applications that exhibit speedup on the GPU, the overall application performance may be bottlenecked by network delay. For such cases, the high cost of GPU instances is inefficient since it does not improve application performance. We also show that the network performance of different instances can vary significantly overtime and public clouds may throttle network bandwidth for applications that generate significant network traffic.},
	booktitle = {2015 {IEEE} 4th {International} {Conference} on {Cloud} {Networking} ({CloudNet})},
	author = {Gilani, M. and Inibhunu, C. and Mahmoud, Q. H.},
	month = oct,
	year = {2015},
	keywords = {cloud computing, Cloud computing, Servers, Amazon EC2, Amazon elastic compute cloud instance, Bandwidth, Central Processing Unit, Cloud Computing, Comparing Cloud Services, computer network management, computer network performance evaluation, Conferences, delay estimation, GPU, GPU instance performance, graphics processing units, Graphics processing units, network delay, network performance, network traffic, public cloud, T2.medium instance performance, Time measurement},
	pages = {315--318},
	file = {IEEE Xplore Full Text PDF:/Users/robin/Zotero/storage/SYRMTFIS/Gilani et al. - 2015 - Application and network performance of Amazon elas.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/robin/Zotero/storage/YQFBFAVB/7335328.html:text/html},
}

@misc{noauthor_horizontal_nodate,
	title = {Horizontal {Pod} {Autoscaler}},
	url = {https://kubernetes.io/de/docs/tasks/run-application/horizontal-pod-autoscale/},
	abstract = {Der Horizontal Pod Autoscaler skaliert automatisch die Anzahl der Pods eines Replication Controller, Deployment oder Replikat Set basierend auf der beobachteten CPU-Auslastung (oder, mit Unterstützung von benutzerdefinierter Metriken, von der Anwendung bereitgestellten Metriken). Beachte, dass die horizontale Pod Autoskalierung nicht für Objekte gilt, die nicht skaliert werden können, z. B. DaemonSets.
Der Horizontal Pod Autoscaler ist als Kubernetes API-Ressource und einem Controller implementiert. Die Ressource bestimmt das Verhalten des Controllers. Der Controller passt die Anzahl der Replikate eines Replication Controller oder Deployments regelmäßig an, um die beobachtete durchschnittliche CPU-Auslastung an das vom Benutzer angegebene Ziel anzupassen.},
	language = {de},
	urldate = {2021-02-02},
	journal = {Kubernetes},
	file = {Snapshot:/Users/robin/Zotero/storage/USUHEFWA/horizontal-pod-autoscale.html:text/html},
}

@misc{noauthor_horizontal_nodate-1,
	title = {Horizontal {Pod} {Autoscaler} - {Amazon} {EKS}},
	url = {https://docs.aws.amazon.com/eks/latest/userguide/horizontal-pod-autoscaler.html},
	urldate = {2021-02-02},
	file = {Horizontal Pod Autoscaler - Amazon EKS:/Users/robin/Zotero/storage/UZHI828D/horizontal-pod-autoscaler.html:text/html},
}

@misc{noauthor_cluster_nodate,
	title = {Cluster {Autoscaler} - {Amazon} {EKS}},
	url = {https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html},
	urldate = {2021-02-02},
	file = {Cluster Autoscaler - Amazon EKS:/Users/robin/Zotero/storage/NEALF8W7/cluster-autoscaler.html:text/html},
}

@misc{noauthor_google_nodate,
	title = {Google Übersetzer},
	url = {https://translate.google.com/translate?hl=de&sl=en&u=https://www.replex.io/blog/kubernetes-in-production-best-practices-for-cluster-autoscaler-hpa-and-vpa&prev=search&pto=aue},
	urldate = {2021-02-02},
	file = {Google Übersetzer:/Users/robin/Zotero/storage/DHDPMWI5/translate.html:text/html},
}

@misc{noauthor_vertical_nodate,
	title = {Vertical {Pod} {Autoscaler} - {Amazon} {EKS}},
	url = {https://docs.aws.amazon.com/eks/latest/userguide/vertical-pod-autoscaler.html},
	urldate = {2021-02-02},
	file = {Vertical Pod Autoscaler - Amazon EKS:/Users/robin/Zotero/storage/JLAUK7QP/vertical-pod-autoscaler.html:text/html},
}

@misc{noauthor_amazon_nodate-2,
	title = {Amazon {API} {Gateway} – {Preise} {\textbar} {API}-{Management} {\textbar} {Amazon} {Web} {Services}},
	url = {https://aws.amazon.com/de/api-gateway/pricing/},
	abstract = {Hier finden Sie Preisdetails für Amazon API Gateway und Beispiele für APIs der Typen HTTP, REST und WebSocket.},
	language = {de-DE},
	urldate = {2021-02-02},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/robin/Zotero/storage/M5BXTILJ/pricing.html:text/html},
}

@misc{noauthor_aws_nodate-2,
	title = {{AWS} {Fargate}-{Preise} {\textbar} {Serverless} {Compute} {Engine} {\textbar} {Amazon} {Web} {Services}},
	url = {https://aws.amazon.com/de/fargate/pricing/},
	abstract = {Erfahren Sie mehr über die Preise von AWS Fargate für den Betrieb von Containern auf Amazon ECS und EKS.},
	language = {de-DE},
	urldate = {2021-02-02},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/robin/Zotero/storage/L5HM6LMA/pricing.html:text/html},
}

@misc{noauthor_how_nodate,
	title = {How to {Reduce} {Docker} {Image} {Size} - {DZone} {Cloud}},
	url = {https://dzone.com/articles/how-to-reduce-docker-image-size},
	abstract = {After some research, we learned some tips that help reduce Docker image size. Read on for the tutorial!},
	language = {en},
	urldate = {2021-02-03},
	journal = {dzone.com},
	file = {Snapshot:/Users/robin/Zotero/storage/YWKY62XT/how-to-reduce-docker-image-size.html:text/html},
}

@misc{noauthor_serverless_2017,
	title = {Serverless {Architectures} with {AWS} {Lambda}},
	url = {https://d1.awsstatic.com/whitepapers/serverless-architectures-with-aws-lambda.pdf},
	language = {de},
	urldate = {2021-02-04},
	month = nov,
	year = {2017},
	file = {serverless-architectures-with-aws-lambda.pdf:/Users/robin/Zotero/storage/NXSF9KF3/serverless-architectures-with-aws-lambda.pdf:application/pdf},
}

@misc{noauthor_preise_nodate,
	title = {Preise für {Elastic} {Load} {Balancing} – {Amazon} {Web} {Services}},
	url = {https://aws.amazon.com/de/elasticloadbalancing/pricing/},
	abstract = {Preisdetails zu Elastic Load Balancing.},
	language = {de-DE},
	urldate = {2021-02-09},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/robin/Zotero/storage/ZX8LF3ZN/pricing.html:text/html},
}

@misc{noauthor_500_nodate,
	title = {500 {Internal} {Server} {Error} - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/de/docs/Web/HTTP/Status/500},
	urldate = {2021-02-10},
	file = {500 Internal Server Error - HTTP | MDN:/Users/robin/Zotero/storage/T6FYHFAE/500.html:text/html},
}

@misc{noauthor_200_nodate,
	title = {200 {OK} - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/de/docs/Web/HTTP/Status/200},
	urldate = {2021-02-10},
	file = {200 OK - HTTP | MDN:/Users/robin/Zotero/storage/X8KIB35T/200.html:text/html},
}

@misc{noauthor_502_nodate,
	title = {502 {Bad} {Gateway} - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502},
	urldate = {2021-02-10},
	file = {502 Bad Gateway - HTTP | MDN:/Users/robin/Zotero/storage/BYNXBZW7/502.html:text/html},
}

@misc{noauthor_error_nodate,
	title = {Error 502 {Bad} {Gateway}: {Wo} liegt das {Problem}?},
	shorttitle = {Error 502 {Bad} {Gateway}},
	url = {https://www.ionos.de/digitalguide/hosting/hosting-technik/was-bedeutet-502-bad-gateway-erklaerung-loesung/},
	abstract = {Der 502-Error: Wir erklären Ihnen, wo Sie als Internetnutzer und als Webmaster nach den Ursachen für den Bad Gateway suchen sollten.},
	language = {de},
	urldate = {2021-02-10},
	journal = {IONOS Digitalguide},
	file = {Snapshot:/Users/robin/Zotero/storage/X2ZXINW4/was-bedeutet-502-bad-gateway-erklaerung-loesung.html:text/html},
}

@misc{noauthor_http_nodate-1,
	title = {{HTTP} 504 ({Gateway} {Timeout}): {So} lässt sich der 504-{Error} beheben},
	shorttitle = {{HTTP} 504 ({Gateway} {Timeout})},
	url = {https://www.ionos.de/digitalguide/hosting/hosting-technik/504-gateway-timeout-so-loesen-sie-das-problem/},
	abstract = {Erfahren Sie hier was Sie bei einem 504 Gateway Time Out machen können. So lösen Sie den Error 504 als Seitenbesucher und Website-Betreiber.},
	language = {de},
	urldate = {2021-02-10},
	journal = {IONOS Digitalguide},
	file = {Snapshot:/Users/robin/Zotero/storage/H2SSYPDV/504-gateway-timeout-so-loesen-sie-das-problem.html:text/html},
}

@misc{noauthor_503_nodate,
	title = {503 {Service} {Unavailable} - {HTTP} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503},
	urldate = {2021-02-10},
	file = {503 Service Unavailable - HTTP | MDN:/Users/robin/Zotero/storage/GI565DDW/503.html:text/html},
}

@misc{noauthor_what_nodate-1,
	title = {What is {Stress} {Testing}? {How} to create a {Stress} {Test} in k6},
	shorttitle = {What is {Stress} {Testing}?},
	url = {https://k6.io/docs/test-types/stress-testing},
	abstract = {Stress and Spike Tests are types of performance tests that are concerned with assessing the limits of your system and stability under extreme conditions. Let’s see two examples.},
	language = {en},
	urldate = {2021-02-10},
	file = {Snapshot:/Users/robin/Zotero/storage/HJC28TSZ/stress-testing.html:text/html},
}

@misc{noauthor_what_nodate-2,
	title = {What is {Load} {Testing}? {How} to create a {Load} {Test} in k6},
	shorttitle = {What is {Load} {Testing}?},
	url = {https://k6.io/docs/test-types/load-testing},
	abstract = {A Load Test is a type of Performance Test that is primarily concerned with assessing the performance of your system in terms of concurrent users or requests per second. Let’s see an example.},
	language = {en},
	urldate = {2021-02-10},
	file = {Snapshot:/Users/robin/Zotero/storage/M8HS3ETK/load-testing.html:text/html},
}

@misc{noauthor_cpu-optionen_nodate,
	title = {{CPU}-{Optionen} optimieren - {Amazon} {Elastic} {Compute} {Cloud}},
	url = {https://docs.aws.amazon.com/de_de/AWSEC2/latest/UserGuide/instance-optimize-cpu.html},
	urldate = {2021-02-13},
	file = {CPU-Optionen optimieren - Amazon Elastic Compute Cloud:/Users/robin/Zotero/storage/VCFATFVA/instance-optimize-cpu.html:text/html},
}

@misc{noauthor_expressjsexpress_2021,
	title = {expressjs/express},
	copyright = {MIT License         ,                 MIT License},
	url = {https://github.com/expressjs/express},
	abstract = {Fast, unopinionated, minimalist web framework for node.},
	urldate = {2021-02-13},
	publisher = {expressjs},
	month = feb,
	year = {2021},
	note = {original-date: 2009-06-26T18:56:01Z},
	keywords = {express, javascript, nodejs, server},
}

@misc{noauthor_serverlessserverless_nodate,
	title = {serverless/serverless: ⚡ {Serverless} {Framework} – {Build} web, mobile and {IoT} applications with serverless architectures using {AWS} {Lambda}, {Azure} {Functions}, {Google} {CloudFunctions} \& more! –},
	url = {https://github.com/serverless/serverless},
	urldate = {2021-02-13},
	file = {serverless/serverless\: ⚡ Serverless Framework – Build web, mobile and IoT applications with serverless architectures using AWS Lambda, Azure Functions, Google CloudFunctions & more! –:/Users/robin/Zotero/storage/ZA4YRHPA/serverless.html:text/html},
}

@misc{noauthor_cloudwatch_preise,
	title = {Preise für {Amazon} {CloudWatch} – {Amazon} {Web} {Services} ({AWS})},
	url = {https://aws.amazon.com/de/cloudwatch/pricing/},
	language = {de-DE},
	urldate = {2021-02-24},
	journal = {Amazon Web Services, Inc.},
	file = {Snapshot:/Users/robin/Zotero/storage/7FDMBR69/pricing.html:text/html},
}

@misc{noauthor_cloudwatch_concepts,
	title = {Amazon {CloudWatch} {Concepts} - {Amazon} {CloudWatch}},
	url = {https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html},
	urldate = {2021-02-24},
	file = {Amazon CloudWatch Concepts - Amazon CloudWatch:/Users/robin/Zotero/storage/9YZ52RH3/cloudwatch_concepts.html:text/html},
}

@misc{noauthor_kongkong_2021,
	title = {Kong/kong},
	copyright = {View license         ,                 View license},
	url = {https://github.com/Kong/kong},
	abstract = {🦍 The Cloud-Native API Gateway . Contribute to Kong/kong development by creating an account on GitHub.},
	urldate = {2021-02-21},
	publisher = {Kong},
	month = feb,
	year = {2021},
	note = {original-date: 2014-11-17T23:56:08Z},
	keywords = {api-gateway, api-management, apis, cloud-native, consul, devops, docker, iot, kong, kubernetes, kubernetes-ingress, kubernetes-ingress-controller, luajit, microservice, microservices, nginx, reverse-proxy, serverless, servicecontrol},
}