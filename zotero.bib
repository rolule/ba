
@online{noauthor_load_nodate,
	title = {Load testing for engineering teams {\textbar} k6},
	url = {https://k6.io},
	abstract = {k6 is an open-source load testing tool and cloud service providing the best developer experience for {API} performance testing.},
	urldate = {2021-01-13},
	langid = {english},
}

@online{noauthor_aws_nodate,
	title = {{AWS} Fargate-Preise {\textbar} Serverless Compute Engine {\textbar} Amazon Web Services},
	url = {https://aws.amazon.com/de/fargate/pricing/},
	abstract = {Erfahren Sie mehr über die Preise von {AWS} Fargate für den Betrieb von Containern auf Amazon {ECS} und {EKS}.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-12},
	langid = {german},
}

@online{noauthor_tracking_2019,
	title = {Tracking the state of {AWS} Lambda functions},
	url = {https://aws.amazon.com/blogs/compute/tracking-the-state-of-lambda-functions/},
	abstract = {{AWS} Lambda functions often require resources from other {AWS} services in order to execute successfully, such as {AWS} Identity and Access Management ({IAM}) roles or Amazon Virtual Private Cloud (Amazon {VPC}) network interfaces. When you create or update a function, Lambda provisions the required resources on your behalf that enable your function to execute. In […]},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-09},
	date = {2019-11-27},
	langid = {american},
	note = {Section: {AWS} Lambda},
}

@online{noauthor_how_2017,
	title = {How I cut my {AWS} bill by 90\% by going serverless},
	url = {https://www.freecodecamp.org/news/how-i-cut-my-aws-bill-by-90-35c937596f0c/},
	abstract = {by Avner Sorek How I cut my {AWS} bill by 90\% by going {serverlessIn} short, I was able to move my side project — an Express.{JS} application — from {AWS} Elastic Beanstalk to Lambda+{APIG}. It took me less than a day and it resulted in a {\textasciitilde}90\% reduction of costs.},
	titleaddon = {{freeCodeCamp}.org},
	urldate = {2021-01-08},
	date = {2017-07-30},
	langid = {english},
}

@misc{ken_owens_cncf_2018,
	title = {{CNCF} {WG}-Serverless Whitepaper v1.0},
	url = {https://github.com/cncf/wg-serverless/blob/master/whitepapers/serverless-overview/cncf_serverless_whitepaper_v1.0.pdf},
	author = {{Ken Owens} and {Sarah Allen} and {Ben Browning} and {Lee Calcote} and {Amir Chaudhry} and {Doug Davis} and {Louis Fourie}},
	urldate = {2021-01-08},
	date = {2018},
	langid = {english},
}

@online{noauthor_edge_nodate,
	title = {Edge Computing{\textbar} {CDN}, Global Serverless Code, Distribution {\textbar} {AWS} Lambda@Edge},
	url = {https://aws.amazon.com/de/lambda/edge/},
	abstract = {Lambda@Edge ist eine Funktion von Amazon {CloudFront}, mit der Sie Code global und näher bei Ihren Benutzern ausführen können, ohne Infrastruktur an mehreren Standorten auf der ganzen Welt bereitzustellen oder zu verwalten.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-08},
	langid = {german},
}

@online{noauthor_cloudeventsspec_nodate,
	title = {cloudevents/spec},
	url = {https://github.com/cloudevents/spec},
	abstract = {{CloudEvents} Specification. Contribute to cloudevents/spec development by creating an account on {GitHub}.},
	titleaddon = {{GitHub}},
	urldate = {2021-01-08},
	langid = {english},
}

@online{noauthor_twelve-factor_nodate,
	title = {The Twelve-Factor App},
	url = {https://12factor.net/},
	urldate = {2021-01-08},
}

@online{noauthor_sam_nodate,
	title = {Sam Newman - Backends For Frontends},
	url = {https://samnewman.io/patterns/architectural/bff/},
	urldate = {2021-01-08},
}

@inproceedings{adzic_serverless_2017,
	location = {Paderborn Germany},
	title = {Serverless computing: economic and architectural impact},
	isbn = {978-1-4503-5105-8},
	url = {https://dl.acm.org/doi/10.1145/3106237.3117767},
	doi = {10.1145/3106237.3117767},
	shorttitle = {Serverless computing},
	abstract = {Amazon Web Services unveiled their ‘Lambda’ platform in late 2014. Since then, each of the major cloud computing infrastructure providers has released services supporting a similar style of deployment and operation, where rather than deploying and running monolithic services, or dedicated virtual machines, users are able to deploy individual functions, and pay only for the time that their code is actually executing. These technologies are gathered together under the marketing term ‘serverless’ and the providers suggest that they have the potential to significantly change how client/server applications are designed, developed and operated.},
	eventtitle = {{ESEC}/{FSE}'17: Joint Meeting of the European Software Engineering Conference and the {ACM} {SIGSOFT} Symposium on the Foundations of Software Engineering},
	pages = {884--889},
	booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
	publisher = {{ACM}},
	author = {Adzic, Gojko and Chatley, Robert},
	urldate = {2021-01-08},
	date = {2017-08-21},
	langid = {english},
}

@inreference{noauthor_economies_2021,
	title = {Economies of scale},
	rights = {Creative Commons Attribution-{ShareAlike} License},
	url = {https://en.wikipedia.org/w/index.php?title=Economies_of_scale&oldid=997909472},
	abstract = {In microeconomics, economies of scale are the cost advantages that enterprises obtain due to their scale of operation (typically measured by the amount of output produced), with cost per unit of output decreasing with increasing scale. At the basis of economies of scale there may be technical, statistical, organizational or related factors to the degree of market control.
Economies of scale apply to a variety of organizational and business situations and at various levels, such as a production, plant or an entire enterprise. When average costs start falling as output increases, then economies of scale occur.
Some economies of scale, such as capital cost of manufacturing facilities and friction loss of transportation and industrial equipment, have a physical or engineering basis.
Another source of scale economies is the possibility of purchasing inputs at a lower per-unit cost when they are purchased in large quantities.
The economic concept dates back to Adam Smith and the idea of obtaining larger production returns through the use of division of labor. Diseconomies of scale are the opposite.
Economies of scale often have limits, such as passing the optimum design point where costs per additional unit begin to increase.  Common limits include exceeding the nearby raw material supply, such as wood in the lumber, pulp and paper industry. A common limit for a low cost per unit weight commodities is saturating the regional market, thus having to ship product uneconomic distances. Other limits include using energy less efficiently or having a higher defect rate.
Large producers are usually efficient at long runs of a product grade (a commodity) and find it costly to switch grades frequently.  They will, therefore, avoid specialty grades even though they have higher margins.  Often smaller (usually older) manufacturing facilities remain viable by changing from commodity-grade production to specialty products.Economies of scale must be distinguished from economies stemming from an increase in the production of a given plant. When a plant is used below its optimal production capacity, increases in its degree of utilization bring about decreases in the total average cost of production. As noticed, among the others, by Nicholas Georgescu-Roegen (1966) and Nicholas Kaldor (1972) these economies are not economies of scale.},
	booktitle = {Wikipedia},
	urldate = {2021-01-08},
	date = {2021-01-02},
	langid = {english},
	note = {Page Version {ID}: 997909472},
}

@online{noauthor_defining_2017,
	title = {Defining Serverless — Part 1},
	url = {https://blog.symphonia.io/posts/2017-06-22_defining-serverless-part-1/},
	abstract = {In case you're new to my articles: Serverless Architecture is a new approach to building systems in the cloud. It incorporates Backends-as-a-Service ({BaaS}) — vendor-hosted, highly scalable, data and logic components to handle our needs for databases, messaging platforms, user management, and more.},
	urldate = {2021-01-08},
	date = {2017-06-22},
	langid = {english},
}

@online{noauthor_cncfwg-serverless_nodate,
	title = {cncf/wg-serverless},
	url = {https://github.com/cncf/wg-serverless},
	abstract = {{CNCF} Serverless {WG}. Contribute to cncf/wg-serverless development by creating an account on {GitHub}.},
	titleaddon = {{GitHub}},
	urldate = {2021-01-08},
	langid = {english},
}

@online{noauthor_deploying_nodate,
	title = {Deploying {AWS} Lambda with Docker Containers: I Gave it a Try and Here's My Review {\textbar} Dashbird},
	url = {https://dashbird.io/blog/deploying-aws-lambda-with-docker/?utm_content=150946872&utm_medium=social&utm_source=twitter&hss_channel=tw-840602408766046208},
	urldate = {2021-01-08},
}

@online{roberts_learning_2017,
	title = {Learning Lambda — Part 8},
	url = {https://blog.symphonia.io/posts/2017-11-14_learning-lambda-part-8/},
	abstract = {This is Part 8 of Learning Lambda, a tutorial series about engineering using {AWS} Lambda. To see the other articles in this series please visit the series home page.},
	author = {Roberts, Mike},
	urldate = {2021-01-08},
	date = {2017-11-14},
	langid = {english},
}

@online{adzic_designing_nodate,
	title = {Designing for the Serverless Age},
	url = {https://gojko.net/2017/10/05/serverless-design-gotocph.html},
	abstract = {Video from {GOTO} Copenhagen},
	titleaddon = {Gojko's blog},
	author = {Adzic, Gojko},
	urldate = {2021-01-08},
	langid = {english},
}

@online{noauthor_why_2012,
	title = {Why The Future Of Software And Apps Is Serverless},
	url = {https://readwrite.com/2012/10/15/why-the-future-of-software-and-apps-is-serverless/},
	abstract = {Even with the rise of cloud computing, the world still revolves around servers. That won't last, though. Cloud apps are moving into a serverless world, and that will bring big implications for the creation and distribution of software and applications.},
	titleaddon = {{ReadWrite}},
	urldate = {2021-01-08},
	date = {2012-10-15},
	langid = {american},
}

@online{noauthor_serverlose_nodate,
	title = {Serverlose Datenverarbeitung – Amazon Web Services},
	url = {https://aws.amazon.com/de/products/databases/},
	abstract = {Mit der serverlosen Datenverarbeitung können Sie Anwendungen und Services erstellen und ausführen, ohne sich über Server Gedanken machen zu müssen. Für serverlose Anwendungen müssen Sie keine Server bereitstellen, skalieren und verwalten.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-08},
	langid = {german},
}

@online{roberts_serverless_2018,
	title = {Serverless Architectures},
	url = {https://martinfowler.com/articles/serverless.html},
	abstract = {Serverless architectures are application designs that incorporate third-party “Backend as a Service” ({BaaS}) services, and/or that include custom code run in managed, ephemeral containers on a “Functions as a Service” ({FaaS}) platform. By using these ideas, and related ones like single-page applications, such architectures remove much of the need for a traditional always-on server component. Serverless architectures may benefit from significantly reduced operational cost, complexity, and engineering lead time, at a cost of increased reliance on vendor dependencies and comparatively immature supporting services.},
	titleaddon = {martinfowler.com},
	author = {Roberts, Mike},
	urldate = {2021-01-07},
	date = {2018-05-22},
	langid = {english},
}

@online{noauthor_serverless_nodate,
	title = {The Serverless Application Framework {\textbar} Serverless.com},
	url = {https://serverless.com/},
	abstract = {Build web, mobile and {IoT} applications using {AWS} Lambda and {API} Gateway, Azure Functions, Google Cloud Functions, and more.},
	titleaddon = {serverless},
	urldate = {2021-01-08},
	langid = {english},
}

@online{yusuf_fundamental_2019,
	title = {The Fundamental Problem: Solving .{NET} Lambda Cold Start Part I},
	url = {https://medium.com/thundra/the-fundamental-problem-solving-net-lambda-cold-start-part-i-1ff4400bb6eb},
	shorttitle = {The Fundamental Problem},
	abstract = {As the age-old battle of .{NET}(C\#) vs Java rages on, it is evident that there is still no clear victor albeit Java’s larger user group…},
	titleaddon = {Medium},
	author = {Yusuf, Sarjeel},
	urldate = {2021-01-08},
	date = {2019-04-19},
	langid = {english},
}

@online{noauthor_bliki_nodate,
	title = {bliki: Serverless},
	url = {https://martinfowler.com/bliki/Serverless.html},
	shorttitle = {bliki},
	abstract = {A brief description of the serverless style of application design, highlighting common features of apps designed in this style.},
	titleaddon = {martinfowler.com},
	urldate = {2021-01-07},
}

@online{noauthor_compute_nodate,
	title = {Compute Services - Overview of Amazon Web Services},
	url = {https://docs.aws.amazon.com/whitepapers/latest/aws-overview/compute-services.html},
	urldate = {2021-01-07},
}

@online{noauthor_aws_nodate-1,
	title = {{AWS} Lambda now supports container images as a packaging format},
	url = {https://aws.amazon.com/about-aws/whats-new/2020/12/aws-lambda-now-supports-container-images-as-a-packaging-format/},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-07},
	langid = {american},
}

@online{noauthor_load_2020,
	title = {Load testing a web application’s serverless backend},
	url = {https://aws.amazon.com/blogs/compute/load-testing-a-web-applications-serverless-backend/},
	abstract = {In this post, I discuss focus areas for load testing of serverless applications, and highlight two tools commonly used. I show how to configure Artillery with customized functions, and how to run tests to simulate load on the Ask Around Me application.},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-07},
	date = {2020-07-06},
	langid = {american},
	note = {Section: Amazon {API} Gateway},
}

@online{noauthor_home_nodate,
	title = {Home {\textbar} {OpenFaaS} - Serverless Functions Made Simple},
	url = {https://www.openfaas.com/},
	urldate = {2021-01-07},
}

@video{goto_conferences_goto_2018,
	title = {{GOTO} 2018 • Confusion in the Land of the Serverless • Sam Newman},
	url = {https://www.youtube.com/watch?v=Y6B3Eqlj9Fw},
	abstract = {This presentation was recorded at {GOTO} Amsterdam 2018. \#gotocon \#gotoams
http://gotoams.nl

Sam Newman - Author of "Building Microservices" from O'Reilly

{ABSTRACT}
Serverless computing is the hot new thing. Like any hyped technology, it promises a lot. However questions remain around concept and implementation, especially when you start to compare how we've built systems in the past, and what serverless offers us now. Is Serverless the future, or just the emperor's [...]

Download slides and read the full abstract here:
https://gotoams.nl/2018/sessions/386

https://twitter.com/gotoamst
https://www.facebook.com/{GOTOConference}
http://gotocon.com
\#Serverless \#Security \#{CloudNative}

Looking for a unique learning experience?
Attend the next {GOTO} Conference near you! Get your ticket at http://gotocon.com

{SUBSCRIBE} {TO} {OUR} {CHANNEL} - new videos posted almost daily.
https://www.youtube.com/user/{GotoConf}...},
	author = {{GOTO Conferences}},
	urldate = {2021-01-07},
	date = {2018-08-07},
}

@unpublished{amazon_web_services_become_nodate,
	title = {Become a Serverless Black Belt: Optimizing Your Serverless Applicatio…},
	url = {https://www.slideshare.net/AmazonWebServices/become-a-serverless-black-belt-optimizing-your-serverless-applications-srv401-reinvent-2017},
	shorttitle = {Become a Serverless Black Belt},
	abstract = {Are you an experienced serverless developer who wants a handy guide to unleash},
	author = {Amazon Web Services},
	urldate = {2021-01-07},
}

@misc{amazon_aws_aws_2020,
	title = {{AWS} Lambda - Developer Guide},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/lambda-dg.pdf},
	shorttitle = {lambda-doc},
	author = {{Amazon AWS}},
	date = {2020},
	langid = {english},
}

@online{noauthor_lambda_nodate,
	title = {Lambda Preise – Amazon Web Services ({AWS})},
	url = {https://aws.amazon.com/de/lambda/pricing/},
	abstract = {Bei den Preisen für {AWS} Lambda bezahlen Sie nur für das, was Sie tatsächlich nutzen. Abgerechnet wird anhand der Anforderungen für Ihre Funktionen und der Zeit, während der Ihr Code ausgeführt wird. Finden Sie hier eine Übersicht der Lambda Preise.},
	titleaddon = {Amazon Web Services, Inc.},
	urldate = {2021-01-07},
	langid = {german},
}

@online{noauthor_aws_nodate-2,
	title = {{AWS} re:Invent 2017: Become a Serverless Black Belt: Optimizing Your Serverless Appli ({SRV}401) - {YouTube}},
	url = {https://www.youtube.com/watch?v=oQFORsso2go&feature=emb_title},
	urldate = {2021-01-07},
}

@online{malishev_aws_2019,
	title = {{AWS} Lambda’s \& {VPC} cold starts — The dark side 🕶 ⛈},
	url = {https://levelup.gitconnected.com/lambda-vpc-cold-starts-a-latency-killer-5408323278dd},
	abstract = {All serverless computing suffers from the dreaded “cold start”, and {AWS} Lambda is no different. I’ve explored cold starts before in a…},
	titleaddon = {Medium},
	author = {Malishev, Nathan},
	urldate = {2021-01-07},
	date = {2019-09-03},
	langid = {english},
}

@online{noauthor_im_2018,
	title = {I’m afraid you’re thinking about {AWS} Lambda cold starts all wrong},
	url = {https://theburningmonk.com/2018/01/im-afraid-youre-thinking-about-aws-lambda-cold-starts-all-wrong/},
	abstract = {Learn to build production-ready serverless applications on {AWS}},
	titleaddon = {theburningmonk.com},
	urldate = {2021-01-07},
	date = {2018-01-17},
	langid = {american},
	note = {Section: {API} Gateway},
}

@online{noauthor_lambda_nodate-1,
	title = {Lambda quotas - {AWS} Lambda},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html},
	urldate = {2021-01-07},
}

@online{noauthor_lambda_nodate-2,
	title = {Lambda concepts - {AWS} Lambda},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-concepts.html},
	urldate = {2021-01-07},
}

@online{noauthor_load_2020-1,
	title = {Load testing a web application’s serverless backend},
	url = {https://aws.amazon.com/blogs/compute/load-testing-a-web-applications-serverless-backend/},
	abstract = {In this post, I discuss focus areas for load testing of serverless applications, and highlight two tools commonly used. I show how to configure Artillery with customized functions, and how to run tests to simulate load on the Ask Around Me application.},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-07},
	date = {2020-07-06},
	langid = {american},
	note = {Section: Amazon {API} Gateway},
}

@online{noauthor_why_nodate,
	title = {Why we switched from docker to serverless},
	url = {https://serverless.com/blog/why-we-switched-from-docker-to-serverless/},
	abstract = {Why we decided to migrate our services running on docker containers to serverless stack using aws lambda functions and aws api gateway},
	titleaddon = {serverless},
	urldate = {2021-01-06},
	langid = {english},
}

@software{noauthor_nordstromserverless-artillery_2021,
	title = {Nordstrom/serverless-artillery},
	rights = {Apache-2.0 License         ,                 Apache-2.0 License},
	url = {https://github.com/Nordstrom/serverless-artillery},
	abstract = {Combine serverless with artillery and you get serverless-artillery for instant, cheap, and easy performance testing at scale.},
	publisher = {Nordstrom, Inc.},
	urldate = {2021-01-06},
	date = {2021-01-06},
	note = {original-date: 2016-08-12T21:17:28Z},
}

@online{noauthor_icymi_2021,
	title = {{ICYMI}: Serverless Q4 2020},
	url = {https://aws.amazon.com/blogs/compute/icymi-serverless-q4-2020/},
	shorttitle = {{ICYMI}},
	abstract = {Welcome to the 12th edition of the {AWS} Serverless {ICYMI} (in case you missed it) quarterly recap. Every quarter, we share all of the most recent product launches, feature enhancements, blog posts, webinars, Twitch live streams, and other interesting things that you might have missed! In case you missed our last {ICYMI}, check out what […]},
	titleaddon = {Amazon Web Services},
	urldate = {2021-01-06},
	date = {2021-01-04},
	langid = {american},
	note = {Section: Amazon {API} Gateway},
}

@software{casalboni_alexcasalboniaws-lambda-power-tuning_2021,
	title = {alexcasalboni/aws-lambda-power-tuning},
	rights = {Apache-2.0 License         ,                 Apache-2.0 License},
	url = {https://github.com/alexcasalboni/aws-lambda-power-tuning},
	abstract = {{AWS} Lambda Power Tuning is an open-source tool that can help you visualize and fine-tune the memory/power configuration of Lambda functions. It runs in your own {AWS} account},
	author = {Casalboni, Alex},
	urldate = {2021-01-06},
	date = {2021-01-05},
	note = {original-date: 2017-03-27T15:18:12Z},
	keywords = {aws, aws-lambda, cost, performance, serverless, state-machine, stepfunctions, visualization},
}

@online{noauthor_building_2020,
	title = {Building more cost-effective Lambda functions with 1 ms billing},
	url = {https://acloudguru.com/blog/engineering/building-more-cost-effective-lambda-functions-with-1-ms-billing},
	abstract = {This change in the duration granularity provides cost savings for almost all Lambda functions, and this will automatically appear on your {AWS} billing statement.},
	titleaddon = {A Cloud Guru},
	urldate = {2021-01-06},
	date = {2020-12-01},
	langid = {american},
}

@online{noauthor_2020_nodate,
	title = {2020 Magic Quadrant for Cloud Infrastructure \& Platform Services},
	url = {https://pages.awscloud.com/GLOBAL-multi-DL-gartner-mq-cips-2020-learn.html},
	urldate = {2021-01-06},
}

@online{noauthor_aws_nodate-3,
	title = {{AWS} Lambda Cold Start Language Comparisons, 2019 edition ☃️ {\textbar} by Nathan Malishev {\textbar} Level Up Coding},
	url = {https://levelup.gitconnected.com/aws-lambda-cold-start-language-comparisons-2019-edition-%EF%B8%8F-1946d32a0244},
	urldate = {2021-01-03},
}

@online{aj_stuyvenberg_breaking_2020,
	title = {{BREAKING} (fine it's a few hours old): Lambda just got per-ms billing! Check your logs, this is a huge savings: (alt: Duration: 35.05 {msBilled} Duration: 36 ms) @goserverless \#Serverless https://t.co/{hVs}0PsDWeM},
	url = {https://twitter.com/astuyve/status/1333601029070483456},
	titleaddon = {@astuyve},
	type = {Tweet},
	author = {{AJ Stuyvenberg}},
	urldate = {2021-01-03},
	date = {2020-01-01},
	langid = {english},
}

@online{noauthor_serverless_nodate-1,
	title = {Serverless Manifesto},
	url = {https://serverless.com/learn/manifesto/},
	abstract = {Serverless Manifesto},
	titleaddon = {serverless},
	urldate = {2020-12-31},
	langid = {english},
}

@online{noauthor_was_2016,
	title = {Was ist Serverless?},
	url = {https://serverless-stack.com/chapters/de/what-is-serverless.html},
	abstract = {Serverlos bezieht sich auf Anwendungen, bei denen die Verwaltung und Zuordnung von Servern und Ressourcen vollständig vom Cloud-Anbieter verwaltet wird. Die Abrechnung basiert auf dem tatsächlichen Verbrauch dieser Ressourcen.},
	titleaddon = {Serverless Stack},
	urldate = {2020-12-31},
	date = {2016-12-23},
	langid = {german},
}

@online{noauthor_was_nodate,
	title = {Was ist Kubernetes?},
	url = {https://kubernetes.io/de/docs/concepts/overview/what-is-kubernetes/},
	abstract = {Diese Seite ist eine Übersicht über Kubernetes.
Kubernetes ist eine portable, erweiterbare Open-Source-Plattform zur Verwaltung von containerisierten Arbeitslasten und Services, die sowohl die deklarative Konfiguration als auch die Automatisierung erleichtert. Es hat einen großes, schnell wachsendes Ökosystem. Kubernetes Dienstleistungen, Support und Tools sind weit verbreitet.
Google hat das Kubernetes-Projekt 2014 als Open-Source-Projekt zur Verfügung gestellt. Kubernetes baut auf anderthalb Jahrzehnten Erfahrung auf, die Google mit der Ausführung von Produktions-Workloads in großem Maßstab hat, kombiniert mit den besten Ideen und Praktiken der Community.},
	titleaddon = {Kubernetes},
	urldate = {2020-12-31},
	langid = {german},
}

@online{noauthor_was_nodate-1,
	title = {Was ist Container-Orchestrierung?},
	url = {https://www.redhat.com/de/topics/containers/what-is-container-orchestration},
	abstract = {Mit der Container-Orchestrierung wird die Bereitstellung, Verwaltung, Skalierung und Vernetzung von Containern automatisiert.},
	urldate = {2020-12-31},
	langid = {german},
}

@online{noauthor_what_nodate,
	title = {What is a Container? {\textbar} App Containerization {\textbar} Docker},
	url = {https://www.docker.com/resources/what-container},
	shorttitle = {What is a Container?},
	abstract = {A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. Learn more.},
	urldate = {2020-12-31},
	langid = {english},
}

@inproceedings{kratzke_clouns_2016,
	title = {{ClouNS} - a Cloud-Native Application Reference Model for Enterprise Architects},
	doi = {10.1109/EDOCW.2016.7584353},
	abstract = {The capability to operate cloud-native applications can generate enormous business growth and value. But enterprise architects should be aware that cloud-native applications are vulnerable to vendor lock-in. We investigated cloud-native application design principles, public cloud service providers, and industrial cloud standards. All results indicate that most cloud service categories seem to foster vendor lock-in situations which might be especially problematic for enterprise architectures. This might sound disillusioning at first. However, we present a reference model for cloud-native applications that relies only on a small subset of well standardized {IaaS} services. The reference model can be used for codifying cloud technologies. It can guide technology identification, classification, adoption, research and development processes for cloud-native application and for vendor lock-in aware enterprise architecture engineering methodologies.},
	eventtitle = {2016 {IEEE} 20th International Enterprise Distributed Object Computing Workshop ({EDOCW})},
	pages = {1--10},
	booktitle = {2016 {IEEE} 20th International Enterprise Distributed Object Computing Workshop ({EDOCW})},
	author = {Kratzke, N. and Peinl, R.},
	date = {2016-09},
	note = {{ISSN}: 2325-6605},
	keywords = {Business, {ClouNS}, Cloud computing, Computer architecture, Containers, {IaaS} service, Interoperability, Standards, business data processing, cloud computing, cloud technology, cloud-native application design principle, cloud-native application reference model, industrial cloud standard, public cloud service provider, vendor lock-in aware enterprise architecture engineering},
}

@online{noauthor_cncftoc_nodate,
	title = {cncf/toc},
	url = {https://github.com/cncf/toc},
	abstract = {⚖️Technical Oversight Committee ({TOC}). Contribute to cncf/toc development by creating an account on {GitHub}.},
	titleaddon = {{GitHub}},
	urldate = {2020-12-29},
	langid = {english},
}
@misc{mell_nist_2011,
	title = {The {NIST} Definition of Cloud Computing},
	url = {https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-145.pdf},
	author = {Mell, Peter and Grance, Timothy},
	urldate = {2020-12-29},
	date = {2011-09},
	langid = {english},
}

@inproceedings{mcgrath_serverless_2017,
	title = {Serverless Computing: Design, Implementation, and Performance},
	doi = {10.1109/ICDCSW.2017.36},
	shorttitle = {Serverless Computing},
	abstract = {We present the design of a novel performance-oriented serverless computing platform implemented in. {NET}, deployed in Microsoft Azure, and utilizing Windows containers as function execution environments. Implementation challenges such as function scaling and container discovery, lifecycle, and reuse are discussed in detail. We propose metrics to evaluate the execution performance of serverless platforms and conduct tests on our prototype as well as {AWS} Lambda, Azure Functions, Google Cloud Functions, and {IBM}'s deployment of Apache {OpenWhisk}. Our measurements show the prototype achieving greater throughput than other platforms at most concurrency levels, and we examine the scaling and instance expiration trends in the implementations. Additionally, we discuss the gaps and limitations in our current design, propose possible solutions, and highlight future research.},
	eventtitle = {2017 {IEEE} 37th International Conference on Distributed Computing Systems Workshops ({ICDCSW})},
	pages = {405--410},
	booktitle = {2017 {IEEE} 37th International Conference on Distributed Computing Systems Workshops ({ICDCSW})},
	author = {{McGrath}, G. and Brenner, P. R.},
	date = {2017-06},
	note = {{ISSN}: 2332-5666},
	keywords = {.{NET}, {AWS} Lambda, Apache {OpenWhisk}, Azure Functions, Containers, {FaaS}, Function-as-a-Service, Google, Google Cloud Functions, {IBM} {OpenWhisk}, {IBM}'s deployment, Metadata, Microsoft Azure, Microsoft Windows (operating systems), Prototypes, Resource management, Runtime, Web services, Windows containers, cloud computing, concurrency (computers), concurrency levels, execution performance evaluation, function execution environments, performance evaluation, performance-oriented serverless computing, serverless computing, serverless performance},
}

@online{noauthor_citations_nodate,
	title = {citations - Can I include just a folder from Zotero into Overleaf instead of my entire library?},
	url = {https://academia.stackexchange.com/questions/144088/can-i-include-just-a-folder-from-zotero-into-overleaf-instead-of-my-entire-libra},
	titleaddon = {Academia Stack Exchange},
	urldate = {2020-12-29},
}