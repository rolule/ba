
@inproceedings{kratzke_clouns_2016,
	title = {{ClouNS} - a Cloud-Native Application Reference Model for Enterprise Architects},
	doi = {10.1109/EDOCW.2016.7584353},
	abstract = {The capability to operate cloud-native applications can generate enormous business growth and value. But enterprise architects should be aware that cloud-native applications are vulnerable to vendor lock-in. We investigated cloud-native application design principles, public cloud service providers, and industrial cloud standards. All results indicate that most cloud service categories seem to foster vendor lock-in situations which might be especially problematic for enterprise architectures. This might sound disillusioning at first. However, we present a reference model for cloud-native applications that relies only on a small subset of well standardized {IaaS} services. The reference model can be used for codifying cloud technologies. It can guide technology identification, classification, adoption, research and development processes for cloud-native application and for vendor lock-in aware enterprise architecture engineering methodologies.},
	eventtitle = {2016 {IEEE} 20th International Enterprise Distributed Object Computing Workshop ({EDOCW})},
	pages = {1--10},
	booktitle = {2016 {IEEE} 20th International Enterprise Distributed Object Computing Workshop ({EDOCW})},
	author = {Kratzke, N. and Peinl, R.},
	date = {2016-09},
	note = {{ISSN}: 2325-6605},
	keywords = {Business, {ClouNS}, Cloud computing, Computer architecture, Containers, {IaaS} service, Interoperability, Standards, business data processing, cloud computing, cloud technology, cloud-native application design principle, cloud-native application reference model, industrial cloud standard, public cloud service provider, vendor lock-in aware enterprise architecture engineering},
}

@online{noauthor_cncftoc_nodate,
	title = {cncf/toc},
	url = {https://github.com/cncf/toc},
	abstract = {⚖️Technical Oversight Committee ({TOC}). Contribute to cncf/toc development by creating an account on {GitHub}.},
	titleaddon = {{GitHub}},
	urldate = {2020-12-29},
	langid = {english},
}

@misc{mell_nist_2011,
	title = {The {NIST} Definition of Cloud Computing},
	url = {https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-145.pdf},
	author = {Mell, Peter and Grance, Timothy},
	urldate = {2020-12-29},
	date = {2011-09},
	langid = {english},
}

@inproceedings{mcgrath_serverless_2017,
	title = {Serverless Computing: Design, Implementation, and Performance},
	doi = {10.1109/ICDCSW.2017.36},
	shorttitle = {Serverless Computing},
	abstract = {We present the design of a novel performance-oriented serverless computing platform implemented in. {NET}, deployed in Microsoft Azure, and utilizing Windows containers as function execution environments. Implementation challenges such as function scaling and container discovery, lifecycle, and reuse are discussed in detail. We propose metrics to evaluate the execution performance of serverless platforms and conduct tests on our prototype as well as {AWS} Lambda, Azure Functions, Google Cloud Functions, and {IBM}'s deployment of Apache {OpenWhisk}. Our measurements show the prototype achieving greater throughput than other platforms at most concurrency levels, and we examine the scaling and instance expiration trends in the implementations. Additionally, we discuss the gaps and limitations in our current design, propose possible solutions, and highlight future research.},
	eventtitle = {2017 {IEEE} 37th International Conference on Distributed Computing Systems Workshops ({ICDCSW})},
	pages = {405--410},
	booktitle = {2017 {IEEE} 37th International Conference on Distributed Computing Systems Workshops ({ICDCSW})},
	author = {{McGrath}, G. and Brenner, P. R.},
	date = {2017-06},
	note = {{ISSN}: 2332-5666},
	keywords = {.{NET}, {AWS} Lambda, Apache {OpenWhisk}, Azure Functions, Containers, {FaaS}, Function-as-a-Service, Google, Google Cloud Functions, {IBM} {OpenWhisk}, {IBM}'s deployment, Metadata, Microsoft Azure, Microsoft Windows (operating systems), Prototypes, Resource management, Runtime, Web services, Windows containers, cloud computing, concurrency (computers), concurrency levels, execution performance evaluation, function execution environments, performance evaluation, performance-oriented serverless computing, serverless computing, serverless performance},
}

@online{noauthor_citations_nodate,
	title = {citations - Can I include just a folder from Zotero into Overleaf instead of my entire library?},
	url = {https://academia.stackexchange.com/questions/144088/can-i-include-just-a-folder-from-zotero-into-overleaf-instead-of-my-entire-libra},
	titleaddon = {Academia Stack Exchange},
	urldate = {2020-12-29},
}